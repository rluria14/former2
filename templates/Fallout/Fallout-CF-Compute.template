AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Instances"
Parameters:
  AvailabilityZone:
    Description: Name of availibility zone
    Type: String
    Default: us-east-1
Resources:
  ECSCluster2:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "default"
  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-lb"
      Scheme: "internet-facing"
      Type: "network"
      Subnets:
        - !Ref EC2Subnet3
        - !Ref EC2Subnet7
        - !Ref EC2Subnet8
      SecurityGroups:
        - !Ref EC2SecurityGroup9
        - !Ref EC2SecurityGroup16
        - !Ref EC2SecurityGroup12
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "false"
        - Key: "access_logs.s3.enabled"
          Value: "false"

  ElasticLoadBalancingV2LoadBalancer2:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-lb"
      Scheme: "internet-facing"
      Type: "network"
      Subnets:
        - !Ref EC2Subnet8
        - !Ref EC2Subnet7
        - !Ref EC2Subnet3
      SecurityGroups:
        - !Ref EC2SecurityGroup9
        - !Ref EC2SecurityGroup16
        - !Ref EC2SecurityGroup12
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "false"
        - Key: "access_logs.s3.enabled"
          Value: "false"

  ElasticLoadBalancingV2LoadBalancer3:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "fo-ft-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !Ref EC2Subnet7
        - !Ref EC2Subnet8
        - !Ref EC2Subnet3
      SecurityGroups:
        - !Ref EC2SecurityGroup12
        - !Ref EC2SecurityGroup9
        - !Ref EC2SecurityGroup16
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "true"
        - Key: "access_logs.s3.bucket"
          Value: !Ref S3Bucket14
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "true"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        - Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 443
      Protocol: "TCP"
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup3
          Type: "forward"

  ElasticLoadBalancingV2Listener2:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer3
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  ElasticLoadBalancingV2Listener3:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer3
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-FS-1-2-Res-2020-10"
      Certificates:
        - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${EC2PrefixList.OwnerId}:certificate/582d3c7b-a264-4112-9e46-00c759a5dacf"
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
          Type: "forward"

  ElasticLoadBalancingV2Listener4:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer2
      Port: 443
      Protocol: "TCP"
      DefaultActions:
        - TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp/1f3f5e1dc0a1d44b"
          Type: "forward"

  ElasticLoadBalancingV2ListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "1"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/3c8cdd9457e523db"
      Conditions:
        - Field: "path-pattern"
          Values:
            - "/subscription*"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule2:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "3"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - "ftapi.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule3:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "4"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - "factrac.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup6
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup6
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule4:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "5"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup5
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup5
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false
              DurationSeconds: 3600

  ElasticLoadBalancingV2ListenerRule5:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "6"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - "flower.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${S3Bucket17}-flower/408ae76e442332a7"
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${S3Bucket17}-flower/408ae76e442332a7"
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule6:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "7"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - "fallout.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup8
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup8
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

  ElasticLoadBalancingV2ListenerRule7:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "8"
      ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
      Conditions:
        - Field: "host-header"
          Values:
            - "redwing-test.rapidprototypeteam.net"
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
          Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                Weight: 1
            TargetGroupStickinessConfig:
              Enabled: false

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "ecs-geonos-${S3Bucket17}-flower"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup2:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "ecs-fallou-${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-service"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup3:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            Port: 8000
            Protocol: "TCP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "TCP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            HealthyThresholdCount: 3
            VpcId: !Ref EC2VPC
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-tcp"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "proxy_protocol_v2.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "preserve_client_ip.enabled"
                Value: "true"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.type"
                Value: "source_ip"
              -
                Key: "target_health_state.unhealthy.connection_termination.enabled"
                Value: "true"
              -
                Key: "deregistration_delay.connection_termination.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
            Targets:
              -
                Id: !Ref EC2Instance3
                Port: 8000

    ElasticLoadBalancingV2TargetGroup4:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${ECSService7.Name}-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup5:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8000
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "corellia"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance
                Port: 8000

    ElasticLoadBalancingV2TargetGroup6:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "ft-ui-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup7:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 5555
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${S3Bucket17}-flower"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance6
                Port: 5555

    ElasticLoadBalancingV2TargetGroup8:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "naboo"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance2
                Port: 8080

    ElasticLoadBalancingV2TargetGroup9:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "rdt-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: "10.233.167.60"
                Port: 80
                AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone

    ElasticLoadBalancingV2TargetGroup10:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            Port: 443
            Protocol: "TCP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "TCP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            HealthyThresholdCount: 3
            VpcId: !Ref EC2VPC
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "proxy_protocol_v2.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "preserve_client_ip.enabled"
                Value: "true"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.type"
                Value: "source_ip"
              -
                Key: "target_health_state.unhealthy.connection_termination.enabled"
                Value: "true"
              -
                Key: "deregistration_delay.connection_termination.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
            Targets:
              -
                Id: !Ref EC2Instance5
                Port: 443

    ElasticLoadBalancingV2TargetGroup11:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${ECSService.Name}-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "10"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"