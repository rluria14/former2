AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-0f5d994f1d45d2f38"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance2.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-0eefdff72caf04c7d"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}1"
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    EC2Instance2:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-0f5d994f1d45d2f38"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-0eefdff72caf04c7d"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}1"
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup8.TargetGroupName
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    EC2Instance3:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-01dea095ddb844e42"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-0fa782948ed9b1e59"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup3.TargetGroupName}1"
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup3.TargetGroupName
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    EC2Instance4:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-04581fbf744a7d11f"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-07964ba64a11eca92"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "Name"
                Value: "dagobah1"
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    EC2Instance5:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-01dea095ddb844e42"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-0fa782948ed9b1e59"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "TG"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp1"
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    EC2Instance6:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !Sub "${IAMPolicy12}-0f5d994f1d45d2f38"
            InstanceType: "t3.small"
            KeyName: "fallout-bastion"
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Tenancy: !Ref ECSCluster2
            SubnetId: !Ref EC2Subnet
            EbsOptimized: false
            SecurityGroupIds:
              - !Ref EC2SecurityGroup9
            SourceDestCheck: true
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: true
                    VolumeSize: 30
                    SnapshotId: "snap-0eefdff72caf04c7d"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole14
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${S3Bucket17}1"
              -
                Key: "TG"
                Value: !Sub "${S3Bucket17}-flower"
            HibernationOptions:
                Configured: false
            CpuOptions:
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions:
                Enabled: false

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "${S3Bucket17}-queue-watch"
            Handler: "service.lambda_handler"
            Architectures:
              - "x86_64"
            Code:
                S3Bucket: "prod-04-2014-tasks"
                S3Key: !Sub "/snapshots/${EC2PrefixList.OwnerId}/${S3Bucket17}-queue-watch-4b2d2f4c-200e-4cae-b690-3f4bb90fc187"
                S3ObjectVersion: "9JOUlSeSaSimhyRfenHe9cj0KlaQyIRU"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole36}"
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig:
                Mode: "PassThrough"
            VpcConfig:
                SubnetIds:
                  - !Ref EC2Subnet9
                  - !Ref EC2Subnet
                  - !Ref EC2Subnet4
                SecurityGroupIds:
                  - !Ref EC2SecurityGroup9
            EphemeralStorage:
                Size: 512

    ECRRepository:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !GetAtt ElasticLoadBalancingV2TargetGroup8.TargetGroupName
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository2:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !Sub "${S3Bucket17}/runner"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository3:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: "dathomir/subscription"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository4:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: "factrac_api"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository5:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !Sub "${S3Bucket17}/flower"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository6:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !Sub "${S3Bucket17}/pipeline"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository7:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: "factrac_ui"
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECRRepository8:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName
            LifecyclePolicy:
                RegistryId: !GetAtt EC2PrefixList.OwnerId

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "fallout-cluster"

    ECSCluster2:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "default"

    ECSCluster3:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !Sub "${S3Bucket17}-cluster"
            CapacityProviders:
              - "FARGATE"
              - "FARGATE_SPOT"

    ECSCluster4:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "rdt-cluster"
            CapacityProviders:
              - "FARGATE"
              - "FARGATE_SPOT"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "aws-glue-scripts-${EC2PrefixList.OwnerId}-${AWS::Region}"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: !Sub "s3/aws-glue-scripts-${EC2PrefixList.OwnerId}-${AWS::Region}/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "deployement-alpha"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "factrac-api-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/factrac-api-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket4:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "config-bucket-${EC2PrefixList.OwnerId}"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: !Sub "s3/config-bucket-${EC2PrefixList.OwnerId}/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket5:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-api-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-api-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket6:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-mock-data"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket7:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "aws-glue-temporary-${EC2PrefixList.OwnerId}-${AWS::Region}"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: !Sub "s3/aws-glue-temporary-${EC2PrefixList.OwnerId}-${AWS::Region}/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket8:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "factrac-ui-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/factrac-ui-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket9:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-dataset"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-dataset/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket10:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "mxr-${S3Bucket15}-state"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: !Sub "s3/mxr-${S3Bucket15}-state/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket11:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "github-workflow-bundles"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket12:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "redwing-sub-test"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/redwing-sub-test/"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket13:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-${AWS::Region}"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-${AWS::Region}"
                LogFilePrefix: !Sub "s3/mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-${AWS::Region}/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket14:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-alb-logs"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-alb-logs/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket15:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-terraform"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-terraform/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket16:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "fallout-${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: !Sub "s3/fallout-${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket17:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "geonosis"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/geonosis/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket18:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-up"
            Tags:
              -
                Key: "AccessLogsBucket"
                Value: "true"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-up/"
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket19:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "factrac-env-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "ObjectWriter"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket20:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "github-workflow-cypress"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            VersioningConfiguration:
                Status: "Enabled"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket21:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "test-ansible-ec2-ssm2"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket22:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "whiteboard-api-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/whiteboard-api-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket23:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "fallout-env-s3"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LoggingConfiguration:
                DestinationBucketName: !Ref S3Bucket13
                LogFilePrefix: "s3/fallout-env-s3/"
            VersioningConfiguration:
                Status: "Enabled"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket24:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-east-2"
            Tags:
              -
                Key: "aws:cloudformation:stack-name"
                Value: !Sub "SC-${EC2PrefixList.OwnerId}-pp-lf2jnh54a66kc"
              -
                Key: "aws:cloudformation:stack-id"
                Value: !Sub "arn:aws:cloudformation:us-east-2:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-lf2jnh54a66kc/d6a1df50-7674-11ed-b6e5-0a9db28fc6a2"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "aws:servicecatalog:portfolioArn"
                Value: "arn:aws:catalog:us-east-2:754775651946:portfolio/port-xgboir2yxq7ha"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"
              -
                Key: "Name"
                Value: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-east-2"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "aws:servicecatalog:productArn"
                Value: "arn:aws:catalog:us-east-2:754775651946:product/prod-iztjrp33l5yps"
              -
                Key: "Project"
                Value: "aws-governance"
              -
                Key: "aws:servicecatalog:provisioningPrincipalArn"
                Value: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMRole27}/${EC2PrefixList.OwnerId}-us-east-2-${IAMRole27}"
              -
                Key: "launch_name"
                Value: "mxr-governance-aws-access-logs-bucket"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "aws:cloudformation:logical-id"
                Value: "AWSLoggingBucket"
              -
                Key: "Component"
                Value: "aws-access-logs-bucket"
              -
                Key: "aws:servicecatalog:provisioningArtifactIdentifier"
                Value: "pa-rlcj6xeanlszq"
              -
                Key: "AccessLogsBucket"
                Value: "true"
              -
                Key: "aws:servicecatalog:provisionedProductArn"
                Value: !Sub "arn:aws:servicecatalog:us-east-2:${EC2PrefixList.OwnerId}:stack/mxr-governance-aws-access-logs-bucket/pp-lf2jnh54a66kc"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LifecycleConfiguration:
                Rules:
                  -
                    Id: "NTI3NTAwNWUtMGFjYS00NDNmLTg4NTQtMjljMTk0MDAwNDQ3"
                    Status: "Enabled"
                    ExpirationInDays: 90
                    NoncurrentVersionExpirationInDays: 90
                    NoncurrentVersionTransitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
                    Transitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
            VersioningConfiguration:
                Status: "Suspended"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket25:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-west-1"
            Tags:
              -
                Key: "aws:cloudformation:stack-name"
                Value: !Sub "SC-${EC2PrefixList.OwnerId}-pp-d4jy6ro3dri4a"
              -
                Key: "aws:cloudformation:stack-id"
                Value: !Sub "arn:aws:cloudformation:us-west-1:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-d4jy6ro3dri4a/267841e0-7675-11ed-aff5-029c50a51cab"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "aws:servicecatalog:portfolioArn"
                Value: "arn:aws:catalog:us-west-1:754775651946:portfolio/port-5qe5nwuwwx47e"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"
              -
                Key: "Name"
                Value: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-west-1"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "aws:servicecatalog:productArn"
                Value: "arn:aws:catalog:us-west-1:754775651946:product/prod-xz2y24xhrymue"
              -
                Key: "Project"
                Value: "aws-governance"
              -
                Key: "aws:servicecatalog:provisioningPrincipalArn"
                Value: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMRole27}/${EC2PrefixList.OwnerId}-us-west-1-${IAMRole27}"
              -
                Key: "launch_name"
                Value: "mxr-governance-aws-access-logs-bucket"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "aws:cloudformation:logical-id"
                Value: "AWSLoggingBucket"
              -
                Key: "Component"
                Value: "aws-access-logs-bucket"
              -
                Key: "aws:servicecatalog:provisioningArtifactIdentifier"
                Value: "pa-ttsjemp3c6cju"
              -
                Key: "AccessLogsBucket"
                Value: "true"
              -
                Key: "aws:servicecatalog:provisionedProductArn"
                Value: !Sub "arn:aws:servicecatalog:us-west-1:${EC2PrefixList.OwnerId}:stack/mxr-governance-aws-access-logs-bucket/pp-d4jy6ro3dri4a"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LifecycleConfiguration:
                Rules:
                  -
                    Id: "N2MxZGMzMTgtMjczMi00NTNmLTgxYTItZTM0MmQwODdlYzhi"
                    Status: "Enabled"
                    ExpirationInDays: 90
                    NoncurrentVersionExpirationInDays: 90
                    NoncurrentVersionTransitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
                    Transitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
            VersioningConfiguration:
                Status: "Suspended"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket26:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-west-2"
            Tags:
              -
                Key: "aws:cloudformation:stack-name"
                Value: !Sub "SC-${EC2PrefixList.OwnerId}-pp-zmlogswnhekga"
              -
                Key: "aws:cloudformation:stack-id"
                Value: !Sub "arn:aws:cloudformation:us-west-2:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-zmlogswnhekga/6676bb80-7672-11ed-9d30-06f2fe3b591b"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "aws:servicecatalog:portfolioArn"
                Value: "arn:aws:catalog:us-west-2:754775651946:portfolio/port-mo4k62lyr4rq6"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"
              -
                Key: "Name"
                Value: !Sub "mxr-gov-aws-access-logs-bucket-${EC2PrefixList.OwnerId}-us-west-2"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "aws:servicecatalog:productArn"
                Value: "arn:aws:catalog:us-west-2:754775651946:product/prod-gqszxqctdlk2c"
              -
                Key: "Project"
                Value: "aws-governance"
              -
                Key: "aws:servicecatalog:provisioningPrincipalArn"
                Value: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMRole27}/${EC2PrefixList.OwnerId}-us-west-2-${IAMRole27}"
              -
                Key: "launch_name"
                Value: "mxr-governance-aws-access-logs-bucket"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "aws:cloudformation:logical-id"
                Value: "AWSLoggingBucket"
              -
                Key: "Component"
                Value: "aws-access-logs-bucket"
              -
                Key: "aws:servicecatalog:provisioningArtifactIdentifier"
                Value: "pa-qev42kmi5ss3i"
              -
                Key: "AccessLogsBucket"
                Value: "true"
              -
                Key: "aws:servicecatalog:provisionedProductArn"
                Value: !Sub "arn:aws:servicecatalog:us-west-2:${EC2PrefixList.OwnerId}:stack/mxr-governance-aws-access-logs-bucket/pp-zmlogswnhekga"
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                  -
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            LifecycleConfiguration:
                Rules:
                  -
                    Id: "N2E5YmI2YjUtODQ1NS00YzIwLThmMmQtNzg0ZTIxZGJjNDlj"
                    Status: "Enabled"
                    ExpirationInDays: 90
                    NoncurrentVersionExpirationInDays: 90
                    NoncurrentVersionTransitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
                    Transitions:
                      -
                        TransitionInDays: 30
                        StorageClass: "STANDARD_IA"
            VersioningConfiguration:
                Status: "Suspended"
            OwnershipControls:
                Rules:
                  -
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-lb"
            Scheme: "internet-facing"
            Type: "network"
            Subnets:
              - !Ref EC2Subnet3
              - !Ref EC2Subnet7
              - !Ref EC2Subnet8
            SecurityGroups:
              - !Ref EC2SecurityGroup9
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "false"
              -
                Key: "access_logs.s3.enabled"
                Value: "false"

    ElasticLoadBalancingV2LoadBalancer2:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-lb"
            Scheme: "internet-facing"
            Type: "network"
            Subnets:
              - !Ref EC2Subnet8
              - !Ref EC2Subnet7
              - !Ref EC2Subnet3
            SecurityGroups:
              - !Ref EC2SecurityGroup9
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "false"
              -
                Key: "access_logs.s3.enabled"
                Value: "false"

    ElasticLoadBalancingV2LoadBalancer3:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "fo-ft-alb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref EC2Subnet7
              - !Ref EC2Subnet8
              - !Ref EC2Subnet3
            SecurityGroups:
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9
              - !Ref EC2SecurityGroup16
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "true"
              -
                Key: "access_logs.s3.bucket"
                Value: !Ref S3Bucket14
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              -
                Key: "deletion_protection.enabled"
                Value: "true"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              -
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              -
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              -
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              -
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              -
                Key: "waf.fail_open.enabled"
                Value: "false"
              -
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "TCP"
            DefaultActions:
              -
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup3
                Type: "forward"

    ElasticLoadBalancingV2Listener2:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer3
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
              -
                Order: 1
                RedirectConfig:
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    ElasticLoadBalancingV2Listener3:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer3
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-FS-1-2-Res-2020-10"
            Certificates:
              -
                CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${EC2PrefixList.OwnerId}:certificate/582d3c7b-a264-4112-9e46-00c759a5dacf"
            DefaultActions:
              -
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                Type: "forward"

    ElasticLoadBalancingV2Listener4:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer2
            Port: 443
            Protocol: "TCP"
            DefaultActions:
              -
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp/1f3f5e1dc0a1d44b"
                Type: "forward"

    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/3c8cdd9457e523db"
            Conditions:
              -
                Field: "path-pattern"
                Values:
                  - "/subscription*"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule2:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "3"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "ftapi.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule3:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "4"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "factrac.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup6
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup6
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule4:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "5"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup5
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup5
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false
                        DurationSeconds: 3600

    ElasticLoadBalancingV2ListenerRule5:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "6"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "flower.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${S3Bucket17}-flower/408ae76e442332a7"
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/${S3Bucket17}-flower/408ae76e442332a7"
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule6:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "7"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "fallout.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup8
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup8
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    ElasticLoadBalancingV2ListenerRule7:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "8"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:listener/app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669/ffa5c0a833b5d414"
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "redwing-test.rapidprototypeteam.net"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-1 created 2021-11-19T09:18:52.620-07:00"
            GroupName: "fallout-bastion-allow-ssh-internet"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "158.184.209.0/24"
                Description: "Herndon"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "205.166.175.0/24"
                Description: "Longmont"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "173.242.16.0/24"
                Description: "Chy"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "71.237.107.138/32"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "68.39.160.171/32"
                Description: "Jacob"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIpv6: "2600:6c67:2e7f:f0ec:1db:f33e:47dd:aa4f/128"
                Description: "Katie"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Managed by Terraform"
            GroupName: "interface_sg"
            Tags:
              -
                Key: "Name"
                Value: "Interface Endpoints Security Group"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                IpProtocol: "-1"
            SecurityGroupEgress:
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                IpProtocol: "-1"

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "2022-01-11T14:17:36.231Z"
            GroupName: "geonos-1818"
            VpcId: !Ref EC2VPC
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup4:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Created by RDS management console"
            GroupName: "Scarif-security-group"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup9
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup14
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                Description: "dathomir"
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup5:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-4 created 2023-05-24T17:37:58.540Z"
            GroupName: "launch-wizard-4"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup6:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-6 created 2023-09-06T17:53:35.467Z"
            GroupName: "launch-wizard-6"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup7:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: !Sub "Security group attached to ${RDSDBInstance} to allow EC2 instances with specific security groups attached to connect to the database. Modification could lead to connection loss."
            GroupName: "rds-ec2-1"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup8
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                Description: !Sub "Rule to allow connections from EC2 instances with ${EC2SecurityGroup8} attached"
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port

    EC2SecurityGroup8:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: !Sub "Security group attached to instances to securely connect to ${RDSDBInstance}. Modification could lead to connection loss."
            GroupName: "ec2-rds-1"
            VpcId: !Ref EC2VPC
            SecurityGroupEgress:
              -
                DestinationSecurityGroupId: !Ref EC2SecurityGroup7
                Description: !Sub "Rule to allow connections to ${RDSDBInstance} from any instances this security group is attached to"
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port

    EC2SecurityGroup9:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-1 created 2021-11-19T09:29:37.924-07:00"
            GroupName: "fallout-workstation"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "214.3.138.230/32"
                Description: "DIA"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "214.14.244.191/32"
                Description: "Customer"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup16
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                SourceSecurityGroupId: "sg-057a2b05eb2709f00"
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: 0
                IpProtocol: "tcp"
                ToPort: 65535
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup16
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: 8080
                IpProtocol: "tcp"
                ToPort: 8080
              -
                CidrIp: "214.3.138.230/32"
                Description: "DIA"
                IpProtocol: "-1"
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup16
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: 8000
                IpProtocol: "tcp"
                ToPort: 8000
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                Description: ""
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "73.3.170.14/32"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: "158.184.209.19/32"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                FromPort: 5672
                IpProtocol: "tcp"
                ToPort: 5672
              -
                CidrIp: "214.14.244.191/32"
                Description: "Customer"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup16
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup10:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "2022-10-06T21:31:41.161Z"
            GroupName: "dathom-9554"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup11:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-5 created 2023-05-24T17:59:46.272Z"
            GroupName: "launch-wizard-5"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup12:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allows access to app"
            GroupName: "rdt-access-sg"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "173.242.16.0/24"
                Description: "Chy"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "158.184.209.0/24"
                Description: "Herndon"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "66.44.59.31/32"
                Description: "Mary"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "205.166.175.0/24"
                Description: "Longmont"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "214.3.138.230/32"
                Description: "DIA"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "214.14.244.191/32"
                Description: "Customer"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "73.201.219.216/32"
                Description: "Jim"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "73.34.224.16/32"
                Description: "Phil"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "184.191.76.96/32"
                Description: "Marshall"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "45.22.249.74/32"
                Description: "Jacob"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "173.67.247.25/32"
                Description: "Ryan"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "24.67.164.123/32"
                Description: "Katie"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "108.18.199.17/32"
                Description: "Ryan"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "70.106.232.238/32"
                Description: "Alan"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "73.128.13.134/32"
                Description: "Jo"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "75.166.107.141/32"
                Description: "Dennis"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIpv6: "2002:4853:cd95:e472:3165:1fc9:c9ee:ceb7/128"
                Description: "Ryan v6"
                IpProtocol: "-1"
              -
                CidrIp: "205.166.175.0/24"
                Description: "Longmont"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "173.242.16.0/24"
                Description: "Chy"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "158.184.209.0/24"
                Description: "Herndon"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "66.44.59.31/32"
                Description: "Mary"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: !Sub "${EC2EIP}/32"
                Description: "VPC External IP"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "214.3.138.230/32"
                Description: "DIA"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "214.14.244.191/32"
                Description: "Customer"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "73.201.219.216/32"
                Description: "Jim"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "184.191.76.96/32"
                Description: "Marshall"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "99.139.221.164/32"
                Description: "Hanna"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "76.154.197.7/32"
                Description: "Phil"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "45.22.249.74/32"
                Description: "Jacob"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "173.67.247.25/32"
                Description: "Ryan"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "24.67.164.123/32"
                Description: "Katie"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "108.18.199.17/32"
                Description: "Ryan"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "173.72.178.165/32"
                Description: "Alan"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "71.178.196.138/32"
                Description: "Martin"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "71.63.54.74/32"
                Description: "Ryan"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "73.128.13.134/32"
                Description: "Jo"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIp: "75.166.107.141/32"
                Description: "Dennis"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup13:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-2 created 2023-05-22T17:56:45.061Z"
            GroupName: "launch-wizard-2"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup14:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "2022-10-07T18:13:13.554Z"
            GroupName: "dathom-5791"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup15:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allow all internal inbound traffic"
            GroupName: "allow_internal_traffic"
            Tags:
              -
                Key: "Name"
                Value: "allow_internal_traffic"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: "sg-084818dc9b31540dd"
                SourceSecurityGroupOwnerId: !GetAtt EC2PrefixList.OwnerId
                Description: "communicate internally"
                IpProtocol: "-1"
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              -
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    EC2SecurityGroup16:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Allow an IP in this VPC access to talk to our endpoints"
            GroupName: "interface_endpoints_sg"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                IpProtocol: "-1"
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup17:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-3 created 2023-05-22T19:36:06.487Z"
            GroupName: "launch-wizard-3"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup18:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-1 created 2023-05-22T17:00:11.868Z"
            GroupName: "launch-wizard-1"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    AutoScalingLaunchConfiguration:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        Properties:
            LaunchConfigurationName: !Sub "EC2ContainerService-${ECSCluster}-EcsInstanceLc-WQX1G450XWZ0"
            ImageId: !Sub "${IAMPolicy12}-0fe19057e9cb4efd8"
            KeyName: "fallout-bastion"
            SecurityGroups:
              - !Ref EC2SecurityGroup9
            UserData: "IyEvYmluL2Jhc2gKZWNobyBFQ1NfQ0xVU1RFUj1mYWxsb3V0LWNsdXN0ZXIgPj4gL2V0Yy9lY3MvZWNzLmNvbmZpZztlY2hvIEVDU19CQUNLRU5EX0hPU1Q9ID4+IC9ldGMvZWNzL2Vjcy5jb25maWc7"
            InstanceType: "t3.small"
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    VolumeSize: 50
                    VolumeType: "gp2"
            InstanceMonitoring: true
            IamInstanceProfile: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole14}"
            EbsOptimized: false

    EC2LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: !Sub "${ECSCluster4}-instance"
            LaunchTemplateData:
                IamInstanceProfile:
                    Arn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole14}"
                SecurityGroupIds:
                  - !Ref EC2SecurityGroup9
                EbsOptimized: false
                KeyName: "fallout-bastion"
                ImageId: !Sub "${IAMPolicy12}-0025cad3f77341405"
                InstanceType: "t3.small"

    EC2LaunchTemplate2:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: "ecs-fallout-test-gold"
            LaunchTemplateData:
                TagSpecifications:
                  -
                    ResourceType: "instance"
                    Tags:
                      -
                        Key: "Name"
                        Value: "ecs-fallout-new"
                UserData: "IyEvYmluL2Jhc2gKYW1hem9uLWxpbnV4LWV4dHJhcyBkaXNhYmxlIGRvY2tlcgphbWF6b24tbGludXgtZXh0cmFzIGluc3RhbGwgLXkgZWNzCmVjaG8gRUNTX0NMVVNURVI9ZmFsbG91dC1jbHVzdGVyID4+IC9ldGMvZWNzL2Vjcy5jb25maWc7CmVjaG8gRUNTX0JBQ0tFTkRfSE9TVD0gPj4gL2V0Yy9lY3MvZWNzLmNvbmZpZzsKZWNobyBOT19QUk9YWT0xNjkuMjU0LjE2OS4yNTQsMTY5LjI1NC4xNzAuMiwvdmFyL3J1bi9kb2NrZXIuc29jaz4+IC9ldGMvZWNzL2Vjcy5jb25maWc7CnN5c3RlbWN0bCBlbmFibGUgLS1ub3cgLS1uby1ibG9jayBlY3Muc2VydmljZQ=="
                InstanceInitiatedShutdownBehavior: "stop"
                BlockDeviceMappings:
                  -
                    DeviceName: "/dev/xvda"
                    Ebs:
                        Encrypted: false
                        DeleteOnTermination: true
                        SnapshotId: "snap-016242766863e23c8"
                        VolumeSize: 30
                        VolumeType: "gp2"
                IamInstanceProfile:
                    Arn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole14}"
                EbsOptimized: true
                KeyName: "fallout-bastion"
                DisableApiTermination: false
                Placement:
                    AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
                    Tenancy: !Ref ECSCluster2
                NetworkInterfaces:
                  -
                    DeleteOnTermination: true
                    DeviceIndex: 0
                    Groups:
                      - !Ref EC2SecurityGroup9
                    SubnetId: !Ref EC2Subnet
                  -
                    DeleteOnTermination: false
                    Description: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:attachment/0f2f0563-efac-47d5-b889-249c0641f91a"
                    DeviceIndex: 2
                    Groups:
                      - !Ref EC2SecurityGroup9
                    SubnetId: !Ref EC2Subnet
                ImageId: !Sub "${IAMPolicy12}-0494b52dbc6d324aa"
                InstanceType: "t3.small"
                Monitoring:
                    Enabled: false
                MetadataOptions:
                    HttpEndpoint: "enabled"
                    HttpPutResponseHopLimit: 1
                    HttpTokens: "optional"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "ecs-geonos-${S3Bucket17}-flower"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup2:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "ecs-fallou-${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-service"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup3:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            Port: 8000
            Protocol: "TCP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "TCP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            HealthyThresholdCount: 3
            VpcId: !Ref EC2VPC
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-tcp"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "proxy_protocol_v2.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "preserve_client_ip.enabled"
                Value: "true"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.type"
                Value: "source_ip"
              -
                Key: "target_health_state.unhealthy.connection_termination.enabled"
                Value: "true"
              -
                Key: "deregistration_delay.connection_termination.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
            Targets:
              -
                Id: !Ref EC2Instance3
                Port: 8000

    ElasticLoadBalancingV2TargetGroup4:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${ECSService7.Name}-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup5:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8000
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "corellia"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance
                Port: 8000

    ElasticLoadBalancingV2TargetGroup6:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "ft-ui-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup7:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 5555
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${S3Bucket17}-flower"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance6
                Port: 5555

    ElasticLoadBalancingV2TargetGroup8:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "naboo"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance2
                Port: 8080

    ElasticLoadBalancingV2TargetGroup9:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "rdt-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: "10.233.167.60"
                Port: 80
                AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone

    ElasticLoadBalancingV2TargetGroup10:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            Port: 443
            Protocol: "TCP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "TCP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            HealthyThresholdCount: 3
            VpcId: !Ref EC2VPC
            Name: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "proxy_protocol_v2.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "preserve_client_ip.enabled"
                Value: "true"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.type"
                Value: "source_ip"
              -
                Key: "target_health_state.unhealthy.connection_termination.enabled"
                Value: "true"
              -
                Key: "deregistration_delay.connection_termination.enabled"
                Value: "false"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
            Targets:
              -
                Id: !Ref EC2Instance5
                Port: 443

    ElasticLoadBalancingV2TargetGroup11:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 10
            UnhealthyThresholdCount: 3
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "${ECSService.Name}-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "10"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              -
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    EC2Volume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0567718ab3afdca17"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "fallout-workstation-1-enc"
            MultiAttachEnabled: false

    EC2Volume2:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 16
            VolumeType: "gp2"
            SnapshotId: "snap-0e5293e3b334ddb74"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "fallout-workstation-2-enc"
            MultiAttachEnabled: false

    EC2Volume3:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-007ec95f708f8773e"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "ssm-2-enc"
            MultiAttachEnabled: false

    EC2Volume4:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 16
            VolumeType: "gp2"
            SnapshotId: "snap-043923525deffbfc3"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "ssm-1-enc"
            MultiAttachEnabled: false

    EC2Volume5:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0cd2326e47765ae3c"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "ssm-rds-xvda-secure"
            MultiAttachEnabled: false

    EC2Volume6:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 16
            VolumeType: "gp2"
            SnapshotId: "snap-0bf59b17e5a719821"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "ssm-rds-sdb-secure"
            MultiAttachEnabled: false

    EC2Volume7:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0216d182423c15b50"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: "ecs-fallout"
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "InstallTaniumAgent"
                Value: "True"
            MultiAttachEnabled: false

    EC2Volume8:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 50
            VolumeType: "gp2"
            SnapshotId: "snap-0216d182423c15b50"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "InstallTaniumAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "ecs-${S3Bucket17}"
            MultiAttachEnabled: false

    EC2Volume9:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0216d182423c15b50"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "InstallTaniumAgent"
                Value: "True"
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: "factrac-ecs"
            MultiAttachEnabled: false

    EC2Volume10:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-07964ba64a11eca92"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            MultiAttachEnabled: false

    EC2Volume11:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-07964ba64a11eca92"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            MultiAttachEnabled: false

    EC2Volume12:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-07964ba64a11eca92"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            MultiAttachEnabled: false

    EC2Volume13:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0eefdff72caf04c7d"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "Name"
                Value: !Sub "${S3Bucket17}1"
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "TG"
                Value: !Sub "${S3Bucket17}-flower"
            MultiAttachEnabled: false

    EC2Volume14:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0eefdff72caf04c7d"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup8.TargetGroupName
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}1"
            MultiAttachEnabled: false

    EC2Volume15:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0eefdff72caf04c7d"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}1"
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName
            MultiAttachEnabled: false

    EC2Volume16:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0fa782948ed9b1e59"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "TG"
                Value: !GetAtt ElasticLoadBalancingV2TargetGroup3.TargetGroupName
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup3.TargetGroupName}1"
            MultiAttachEnabled: false

    EC2Volume17:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            Encrypted: true
            Size: 30
            VolumeType: "gp2"
            SnapshotId: "snap-0fa782948ed9b1e59"
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/529e7e4e-97d9-4ee6-8a2a-fe820540dba8"
            Tags:
              -
                Key: "InstallCrowdstrikeAgent"
                Value: "True"
              -
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp1"
              -
                Key: "TG"
                Value: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-tcp"
            MultiAttachEnabled: false

    EC2VolumeAttachment:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume7
            InstanceId: "i-0e29410d66368917d"
            Device: "/dev/xvda"

    EC2VolumeAttachment2:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume8
            InstanceId: "i-0742ab3611f572388"
            Device: "/dev/xvda"

    EC2VolumeAttachment3:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume9
            InstanceId: "i-036d3c59a6df89089"
            Device: "/dev/xvda"

    EC2VolumeAttachment4:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume10
            InstanceId: !Ref EC2Instance4
            Device: "/dev/xvda"

    EC2VolumeAttachment5:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume11
            InstanceId: "i-0dec6f4498adf6119"
            Device: "/dev/xvda"

    EC2VolumeAttachment6:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume12
            InstanceId: "i-0de95310ab9941b4f"
            Device: "/dev/xvda"

    EC2VolumeAttachment7:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume13
            InstanceId: !Ref EC2Instance6
            Device: "/dev/xvda"

    EC2VolumeAttachment8:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume14
            InstanceId: !Ref EC2Instance2
            Device: "/dev/xvda"

    EC2VolumeAttachment9:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume15
            InstanceId: !Ref EC2Instance
            Device: "/dev/xvda"

    EC2VolumeAttachment10:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume16
            InstanceId: !Ref EC2Instance3
            Device: "/dev/xvda"

    EC2VolumeAttachment11:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume17
            InstanceId: !Ref EC2Instance5
            Device: "/dev/xvda"

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer2.LoadBalancerName}/6d87ed7474937c72"
            PrivateIpAddress: "10.233.161.18"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.161.18"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/197c1a18a3449cbe"
            PrivateIpAddress: "10.233.161.14"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.161.14"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface3:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            PrivateIpAddress: "10.233.172.35"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.172.35"
                Primary: true
            SubnetId: !Ref EC2Subnet9
            SourceDestCheck: false

    EC2NetworkInterface4:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669"
            PrivateIpAddress: "10.233.161.21"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.161.21"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface5:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "AWS Lambda VPC ENI-${LambdaFunction}-72e09e84-b491-4664-9669-27cd4f04ba32"
            PrivateIpAddress: "10.233.174.129"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.174.129"
                Primary: true
            SubnetId: !Ref EC2Subnet9
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface6:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "AWS Lambda VPC ENI-${LambdaFunction}-024d1e82-df89-410f-8587-290794fdacc5"
            PrivateIpAddress: "10.233.169.211"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.169.211"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface7:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/197c1a18a3449cbe"
            PrivateIpAddress: "10.233.160.232"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.232"
                Primary: true
            SubnetId: !Ref EC2Subnet7
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface8:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer2.LoadBalancerName}/6d87ed7474937c72"
            PrivateIpAddress: "10.233.160.154"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.154"
                Primary: true
            SubnetId: !Ref EC2Subnet7
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface9:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            PrivateIpAddress: "10.233.163.39"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.163.39"
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup4

    EC2NetworkInterface10:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669"
            PrivateIpAddress: "10.233.160.239"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.239"
                Primary: true
            SubnetId: !Ref EC2Subnet7
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface11:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway3}"
            PrivateIpAddress: "10.233.170.202"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.170.202"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: false

    EC2NetworkInterface12:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.166.250"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.166.250"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface13:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "AWS Lambda VPC ENI-${LambdaFunction}-6bfd0478-c0c6-4b7d-bfc9-f935018e6510"
            PrivateIpAddress: "10.233.165.24"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.165.24"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface14:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance6.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance6.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface15:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            PrivateIpAddress: "10.233.162.176"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.162.176"
                Primary: true
            SubnetId: !Ref EC2Subnet6
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup4

    EC2NetworkInterface16:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface17:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance3.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance3.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface18:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.164.230"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.164.230"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface19:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance4.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance4.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface20:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.167.59"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.167.59"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup

    EC2NetworkInterface21:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:attachment/a6880350-5828-49c6-a25c-f2ab7c5ea35e"
            PrivateIpAddress: "10.233.167.60"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.167.60"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            Tags:
              -
                Key: "aws:ecs:clusterName"
                Value: !Ref ECSCluster4
              -
                Key: "aws:ecs:serviceName"
                Value: !GetAtt ECSService9.Name
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface22:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer3.LoadBalancerName}/946a3566e2d0d669"
            PrivateIpAddress: "10.233.160.53"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.53"
                Primary: true
            SubnetId: !Ref EC2Subnet8
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface23:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.165.104"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.165.104"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface24:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.164.106"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.164.106"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface25:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance2.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance2.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface26:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: !GetAtt EC2Instance5.PrivateIp
            PrivateIpAddresses:
              -
                PrivateIpAddress: !GetAtt EC2Instance5.PrivateIp
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface27:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer2.LoadBalancerName}/6d87ed7474937c72"
            PrivateIpAddress: "10.233.160.25"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.25"
                Primary: true
            SubnetId: !Ref EC2Subnet8
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface28:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway4}"
            PrivateIpAddress: "10.233.165.72"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.165.72"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: false

    EC2NetworkInterface29:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: ""
            PrivateIpAddress: "10.233.164.154"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.164.154"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface30:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:attachment/a68552d0-dbad-4207-811f-a0d7497f735b"
            PrivateIpAddress: "10.233.166.133"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.166.133"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            Tags:
              -
                Key: "aws:ecs:clusterName"
                Value: !Ref ECSCluster3
              -
                Key: "aws:ecs:serviceName"
                Value: !GetAtt ECSService7.Name
            GroupSet:
              - !Ref EC2SecurityGroup14

    EC2NetworkInterface31:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB net/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/197c1a18a3449cbe"
            PrivateIpAddress: "10.233.160.60"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.60"
                Primary: true
            SubnetId: !Ref EC2Subnet8
            SourceDestCheck: false
            GroupSet:
              - !Ref EC2SecurityGroup16
              - !Ref EC2SecurityGroup12
              - !Ref EC2SecurityGroup9

    EC2NetworkInterface32:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway2}"
            PrivateIpAddress: "10.233.160.96"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.233.160.96"
                Primary: true
            SubnetId: !Ref EC2Subnet8
            SourceDestCheck: false

    EC2NetworkInterfaceAttachment:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-06c463267e33378da"
            DeviceIndex: 0
            InstanceId: "i-0dec6f4498adf6119"
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment2:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0eadceb8265e0c76f"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance6
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment3:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-030c8c0a19db09f94"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment4:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0c3c54379a00505cb"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance3
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment5:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0e41b7dc260972f03"
            DeviceIndex: 0
            InstanceId: "i-0e29410d66368917d"
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment6:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-029774d9c4fad1312"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance4
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment7:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-09d9b8f2cf564df9e"
            DeviceIndex: 2
            InstanceId: "i-036d3c59a6df89089"
            DeleteOnTermination: false

    EC2NetworkInterfaceAttachment8:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0cf42fb0320537611"
            DeviceIndex: 1
            InstanceId: "i-036d3c59a6df89089"
            DeleteOnTermination: false

    EC2NetworkInterfaceAttachment9:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0f51725e10a357466"
            DeviceIndex: 0
            InstanceId: "i-036d3c59a6df89089"
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment10:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-03f6274633e2d61e5"
            DeviceIndex: 0
            InstanceId: "i-0742ab3611f572388"
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment11:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-03c2fcc4646790a61"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance2
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment12:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-0e80f94db434b7aba"
            DeviceIndex: 0
            InstanceId: !Ref EC2Instance5
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment13:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-056420adcc5c6c678"
            DeviceIndex: 0
            InstanceId: "i-0de95310ab9941b4f"
            DeleteOnTermination: true

    EC2NetworkInterfaceAttachment14:
        Type: "AWS::EC2::NetworkInterfaceAttachment"
        Properties:
            NetworkInterfaceId: "eni-089b738e8ea0d004f"
            DeviceIndex: 1
            InstanceId: "i-0742ab3611f572388"
            DeleteOnTermination: false

    EC2FlowLog:
        Type: "AWS::EC2::FlowLog"
        Properties:
            DeliverLogsPermissionArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole31}"
            LogGroupName: "dev-vpc-flow-logs"
            ResourceId: !Ref EC2VPC
            TrafficType: "REJECT"
            LogDestinationType: "cloud-watch-logs"
            LogDestination: !Sub "arn:aws:logs:${AWS::Region}:${EC2PrefixList.OwnerId}:log-group:dev-vpc-flow-logs"
            ResourceType: "VPC"
            LogFormat: "${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}"
            MaxAggregationInterval: 600

    EC2KeyPair:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "fallout-bastion"
            KeyType: "rsa"

    EC2KeyPair2:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "phil-dev-env"
            KeyType: "rsa"

    EC2KeyPair3:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "joseph-dev-env"
            KeyType: "rsa"

    EC2KeyPair4:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "atl-fallout"
            KeyType: "rsa"

    LambdaVersion:
        Type: "AWS::Lambda::Version"
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunction

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "events.amazonaws.com"
            SourceArn: !Sub "arn:aws:events:${AWS::Region}:${EC2PrefixList.OwnerId}:rule/${EventsRule16}"

    ECSService:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "Corellia-service"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup11
                ContainerName: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName
                ContainerPort: 80
            DesiredCount: 0
            LaunchType: "EC2"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-task:86"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            HealthCheckGracePeriodSeconds: 20
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService2:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-service"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                ContainerName: !GetAtt ElasticLoadBalancingV2TargetGroup8.TargetGroupName
                ContainerPort: 8080
            DesiredCount: 0
            LaunchType: "EC2"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-task:130"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup9
                    Subnets:
                      - !Ref EC2Subnet
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService3:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${S3Bucket17}-rmq"
            Cluster: !GetAtt ECSCluster3.Arn
            ServiceRegistries:
              -
                RegistryArn: !Sub "arn:aws:servicediscovery:${AWS::Region}:${EC2PrefixList.OwnerId}:service/srv-7esqav3q57q6io2s"
                ContainerName: !Sub "${S3Bucket17}-rmq"
                ContainerPort: 5672
            DesiredCount: 0
            LaunchType: "EC2"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${S3Bucket17}-task:104"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService4:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${S3Bucket17}-runner"
            Cluster: !GetAtt ECSCluster3.Arn
            DesiredCount: 0
            LaunchType: "EC2"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${S3Bucket17}-task-runner:146"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService5:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${S3Bucket17}-flower"
            Cluster: !GetAtt ECSCluster3.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${EC2PrefixList.OwnerId}:targetgroup/ecs-geonos-${S3Bucket17}-flower/ecc0899f76446027"
                ContainerName: !Sub "${S3Bucket17}-flower"
                ContainerPort: 5555
            DesiredCount: 0
            LaunchType: "EC2"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${S3Bucket17}-task-runner:147"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService6:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${S3Bucket17}-pipeline"
            Cluster: !GetAtt ECSCluster3.Arn
            DesiredCount: 0
            LaunchType: "FARGATE"
            PlatformVersion: "LATEST"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:task-definition/${S3Bucket17}-task-pipeline:89"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup3
                    Subnets:
                      - !Ref EC2Subnet
                      - !Ref EC2Subnet4
                      - !Ref EC2Subnet9
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService7:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "dathomir-subscription"
            Cluster: !GetAtt ECSCluster3.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup4
                ContainerName: "dathomir-subscription"
                ContainerPort: 80
            DesiredCount: 1
            LaunchType: "EC2"
            TaskDefinition: !Ref ECSTaskDefinition8
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup14
                    Subnets:
                      - !Ref EC2Subnet
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService8:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "factrac-ui-service"
            Cluster: !GetAtt ECSCluster4.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                ContainerName: "factrac-ui"
                ContainerPort: 8080
            DesiredCount: 1
            LaunchType: "EC2"
            TaskDefinition: !Ref ECSTaskDefinition6
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup9
                    Subnets:
                      - !Ref EC2Subnet
                      - !Ref EC2Subnet4
                      - !Ref EC2Subnet9
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSService9:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "factrac-api-service"
            Cluster: !GetAtt ECSCluster4.Arn
            LoadBalancers:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup9
                ContainerName: "factrac-container"
                ContainerPort: 80
            DesiredCount: 1
            LaunchType: "EC2"
            TaskDefinition: !Ref ECSTaskDefinition7
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 0
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies:
              -
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              -
                Type: "spread"
                Field: "instanceId"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "DISABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup9
                    Subnets:
                      - !Ref EC2Subnet
                      - !Ref EC2Subnet4
                      - !Ref EC2Subnet9
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController:
                Type: "ECS"

    ECSTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket5}/.ui.env"
                Essential: true
                HealthCheck:
                    Command:
                      - "CMD-SHELL"
                      - "curl -f http://localhost:8080 || exit 1"
                    Interval: 30
                    Timeout: 5
                    Retries: 3
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}:20711b9d0f029ef5d81b5f7508996d11815f77e4"
                Name: !GetAtt ElasticLoadBalancingV2TargetGroup8.TargetGroupName
                PortMappings:
                  -
                    ContainerPort: 8080
                    HostPort: 8080
                    Protocol: "tcp"
            Family: !Sub "${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-task"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-ecs-task-role"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole12}"
            NetworkMode: "awsvpc"
            RequiresCompatibilities:
              - "EC2"
            Memory: "500"

    ECSTaskDefinition2:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                Essential: true
                Image: "rabbitmq:3.8.17"
                Name: !Sub "${S3Bucket17}-rmq"
                PortMappings:
                  -
                    ContainerPort: 5672
                    HostPort: 5672
                    Protocol: "tcp"
                  -
                    ContainerPort: 15672
                    HostPort: 15672
                    Protocol: "tcp"
            Family: !Sub "${S3Bucket17}-task"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            NetworkMode: "host"
            Cpu: "512"
            Memory: "512"

    ECSTaskDefinition3:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                EntryPoint:
                  - "celery"
                  - "--app=app.celery"
                  - "flower"
                  - "--port=5555"
                  - "--uid=nobody"
                  - "--gid=nogroup"
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket17}/.env"
                Essential: true
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/${S3Bucket17}/flower:2ec042ea2ea622c32c9d1f2aaa55bd08c4040d87"
                Name: !Sub "${S3Bucket17}-flower"
                PortMappings:
                  -
                    ContainerPort: 5555
                    HostPort: 5555
                    Protocol: "tcp"
            Family: !Sub "${S3Bucket17}-task-runner"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${S3Bucket17}-ecs-role"
            NetworkMode: "host"
            Cpu: "512"
            Memory: "512"

    ECSTaskDefinition4:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket17}/.env"
                Essential: true
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/${S3Bucket17}/pipeline:2ec042ea2ea622c32c9d1f2aaa55bd08c4040d87"
                LogConfiguration:
                    LogDriver: "awslogs"
                    Options:
                        awslogs-group: "log-pipeline"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: !Sub "${S3Bucket17}-pipeline"
                Name: !Sub "${S3Bucket17}-pipeline"
            Family: !Sub "${S3Bucket17}-task-pipeline"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            NetworkMode: "awsvpc"
            Cpu: "512"
            Memory: "1024"

    ECSTaskDefinition5:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                Command:
                  - "celery"
                  - "--app=app.celery"
                  - "flower"
                  - "--port=5555"
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket17}/.env"
                Essential: true
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/${S3Bucket17}/pipeline:flower"
                Memory: 500
                Name: !Sub "${S3Bucket17}-flower"
                PortMappings:
                  -
                    ContainerPort: 5555
                    HostPort: 5555
                    Protocol: "tcp"
            Family: !Sub "${S3Bucket17}-flower"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${S3Bucket17}-ecs-role"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            RequiresCompatibilities:
              - "EC2"

    ECSTaskDefinition6:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket3}/.ui.env"
                Essential: true
                HealthCheck:
                    Command:
                      - "CMD-SHELL"
                      - "curl -f http://localhost:8080 || exit 1"
                    Interval: 30
                    Timeout: 5
                    Retries: 3
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/factrac_ui:latest"
                LogConfiguration:
                    LogDriver: "awslogs"
                    Options:
                        awslogs-create-group: "true"
                        awslogs-group: "log-factrac-ui"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                Name: "factrac-ui"
                PortMappings:
                  -
                    ContainerPort: 8080
                    HostPort: 8080
                    Protocol: "tcp"
            Family: "factrac-ui-task"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            NetworkMode: "awsvpc"
            RequiresCompatibilities:
              - "EC2"
            Memory: "900"

    ECSTaskDefinition7:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket3}/.env"
                Essential: true
                HealthCheck:
                    Command:
                      - "CMD-SHELL"
                      - "curl -f http://localhost || exit 1"
                    Interval: 30
                    Timeout: 5
                    Retries: 3
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/factrac_api:3fc0e0cb5cab7e0a1c1d4bdd74e0e1293fed4301"
                LogConfiguration:
                    LogDriver: "awslogs"
                    Options:
                        awslogs-group: "log-factrac-api"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "factrac-api"
                Name: "factrac-container"
                PortMappings:
                  -
                    ContainerPort: 80
                    HostPort: 80
                    Protocol: "tcp"
            Family: "factrac-task"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            NetworkMode: "awsvpc"
            RequiresCompatibilities:
              - "FARGATE"
            Cpu: "512"
            Memory: "1024"

    ECSTaskDefinition8:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                Environment:
                  -
                    Name: "ORIGINS"
                    Value: !Sub "https://${S3Bucket17}.rapidprototypeteam.net,http://localhost:3000"
                EnvironmentFiles:
                  -
                    Type: "s3"
                    Value: !Sub "arn:aws:s3:::${S3Bucket17}/.env"
                Essential: true
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/dathomir/subscription:d581e8a1c9fad44013e6fae2dcc57e4a35389bd5"
                LogConfiguration:
                    LogDriver: "awslogs"
                    Options:
                        awslogs-group: "log-pipeline"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: !GetAtt ECSService7.Name
                Name: !GetAtt ECSService7.Name
                PortMappings:
                  -
                    ContainerPort: 80
                    HostPort: 80
                    Protocol: "tcp"
            Family: !Sub "${ECSService7.Name}-task"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            NetworkMode: "awsvpc"
            Cpu: "256"
            Memory: "256"

    ECSTaskDefinition9:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions:
              -
                Environment:
                  -
                    Name: "ORIGINS"
                    Value: !Sub "https://${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}.rapidprototypeteam.net,https://fallout.rapidprototypeteam.net,http://localhost:3000"
                Essential: true
                HealthCheck:
                    Command:
                      - "CMD-SHELL"
                      - "curl -f http://localhost || exit 1"
                    Interval: 30
                    Timeout: 5
                    Retries: 3
                Image: !Sub "${EC2PrefixList.OwnerId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}:3c6a01a613a8a87ae8ddc09ae0cef1ea726ea4cf"
                Name: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName
                PortMappings:
                  -
                    ContainerPort: 80
                    HostPort: 80
                    Protocol: "tcp"
                Secrets:
                  -
                    Name: "DB_PASS"
                    ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${EC2PrefixList.OwnerId}:secret:${RDSDBInstance}-dev-pw-AZrdeD:password::"
                  -
                    Name: "DB_HOST"
                    ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${EC2PrefixList.OwnerId}:secret:${RDSDBInstance}-dev-pw-AZrdeD:host::"
                  -
                    Name: "DB_USER"
                    ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${EC2PrefixList.OwnerId}:secret:${RDSDBInstance}-dev-pw-AZrdeD:username::"
            Family: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-task"
            TaskRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-ecs-task-role"
            ExecutionRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole10}"
            RequiresCompatibilities:
              - "EC2"
            Memory: "900"

    ApplicationAutoScalingScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: 3
            MinCapacity: 0
            ResourceId: !Sub "service/${ECSCluster3}/${S3Bucket17}-pipeline"
            RoleARN: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            SuspendedState:
                DynamicScalingInSuspended: false
                DynamicScalingOutSuspended: false
                ScheduledScalingSuspended: false

    ApplicationAutoScalingScalingPolicy:
        Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: "ScaleOutPolicy"
            PolicyType: "StepScaling"
            ResourceId: !Sub "service/${ECSCluster3}/${S3Bucket17}-pipeline"
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            StepScalingPolicyConfiguration:
                AdjustmentType: "ChangeInCapacity"
                Cooldown: 300
                MetricAggregationType: "Average"
                StepAdjustments: {}

    ApplicationAutoScalingScalingPolicy2:
        Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: "ScaleInPolicy"
            PolicyType: "StepScaling"
            ResourceId: !Sub "service/${ECSCluster3}/${S3Bucket17}-pipeline"
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            StepScalingPolicyConfiguration:
                AdjustmentType: "ChangeInCapacity"
                Cooldown: 300
                MetricAggregationType: "Average"
                StepAdjustments: {}

    ECSCapacityProvider:
        Type: "AWS::ECS::CapacityProvider"
        Properties:
            Name: "rdt-instances"
            AutoScalingGroupProvider:
                AutoScalingGroupArn: !Sub "arn:aws:autoscaling:${AWS::Region}:${EC2PrefixList.OwnerId}:autoScalingGroup:53329db7-4312-4308-a764-1dad7bffb33f:autoScalingGroupName/rdt-asg"
                ManagedTerminationProtection: "DISABLED"
                ManagedScaling:
                    MaximumScalingStepSize: 10000
                    MinimumScalingStepSize: 1
                    Status: "DISABLED"
                    TargetCapacity: 100

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket3
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket3}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket3}"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket8
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket8}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket8}"

    S3BucketPolicy3:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket9
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket9}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket9}"

    S3BucketPolicy4:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket10
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "AllowTLSRequestsOnly"
                    Effect: "Deny"
                    Principal: "*"
                    Action: "s3:*"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket10}"
                      - !Sub "arn:aws:s3:::${S3Bucket10}/*"
                    Condition:
                        Bool:
                            "aws:SecureTransport": "false"

    S3BucketPolicy5:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket11
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket11}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket11}"

    S3BucketPolicy6:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket14
            PolicyDocument:
                Version: "2012-10-17"
                Id: "AWSConsole-AccessLogs-Policy-1651510708562"
                Statement:
                  -
                    Sid: "AWSConsoleStmt-1651510708562"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::127311923021:root"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket14}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                  -
                    Sid: "AWSLogDeliveryWrite"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket14}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "AWSLogDeliveryAclCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action: "s3:GetBucketAcl"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket14}"

    S3BucketPolicy7:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket16
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket16}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket16}"

    S3BucketPolicy8:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket18
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1661273718111"
                Statement:
                  -
                    Sid: "Stmt1661273514223"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::736830665339:role/s3_reader_ec2"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket18}/*"
                  -
                    Sid: "Stmt1661273514224"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::736830665339:role/s3_reader_ec2"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket18}"

    S3BucketPolicy9:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket4
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "AWSConfigBucketPermissionsCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "config.amazonaws.com"
                    Action: "s3:GetBucketAcl"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket4}"
                    Condition:
                        StringEquals:
                            "AWS:SourceAccount": !GetAtt EC2PrefixList.OwnerId
                  -
                    Sid: "AWSConfigBucketExistenceCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "config.amazonaws.com"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket4}"
                    Condition:
                        StringEquals:
                            "AWS:SourceAccount": !GetAtt EC2PrefixList.OwnerId
                  -
                    Sid: "AWSConfigBucketDelivery"
                    Effect: "Allow"
                    Principal:
                        Service: "config.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket4}/AWSLogs/${EC2PrefixList.OwnerId}/Config/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                            "AWS:SourceAccount": !GetAtt EC2PrefixList.OwnerId

    S3BucketPolicy10:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket22
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket22}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket22}"

    S3BucketPolicy11:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket23
            PolicyDocument:
                Version: "2012-10-17"
                Id: "Policy1611277539797"
                Statement:
                  -
                    Sid: "Stmt1611277535086"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket23}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "Stmt1611277877767"
                    Effect: "Allow"
                    Principal:
                        AWS: !Sub "arn:aws:iam::798014845009:role/${IAMGroup}"
                    Action: "s3:ListBucket"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket23}"

    S3BucketPolicy12:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket24
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "s3-access-logs"
                    Effect: "Allow"
                    Principal:
                        Service: "logging.s3.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket24}/*"
                  -
                    Sid: "elb-regional-permissions"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::033677994240:root"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket24}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket24}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                  -
                    Sid: "AWSLogDeliveryWrite"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket24}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket24}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "AWSLogDeliveryAclCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action:
                      - "s3:GetBucketAcl"
                      - "s3:PutBucketAcl"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket24}"

    S3BucketPolicy13:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket25
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "s3-access-logs"
                    Effect: "Allow"
                    Principal:
                        Service: "logging.s3.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket25}/*"
                  -
                    Sid: "elb-regional-permissions"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::027434742980:root"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket25}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket25}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                  -
                    Sid: "AWSLogDeliveryWrite"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket25}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket25}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "AWSLogDeliveryAclCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action:
                      - "s3:GetBucketAcl"
                      - "s3:PutBucketAcl"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket25}"

    S3BucketPolicy14:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket26
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "s3-access-logs"
                    Effect: "Allow"
                    Principal:
                        Service: "logging.s3.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket26}/*"
                  -
                    Sid: "elb-regional-permissions"
                    Effect: "Allow"
                    Principal:
                        AWS: "arn:aws:iam::797873946194:root"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket26}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket26}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                  -
                    Sid: "AWSLogDeliveryWrite"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource:
                      - !Sub "arn:aws:s3:::${S3Bucket26}/*/AWSLogs/${EC2PrefixList.OwnerId}/*"
                      - !Sub "arn:aws:s3:::${S3Bucket26}/AWSLogs/${EC2PrefixList.OwnerId}/*"
                    Condition:
                        StringEquals:
                            "s3:x-amz-acl": "bucket-owner-full-control"
                  -
                    Sid: "AWSLogDeliveryAclCheck"
                    Effect: "Allow"
                    Principal:
                        Service: "delivery.logs.amazonaws.com"
                    Action:
                      - "s3:GetBucketAcl"
                      - "s3:PutBucketAcl"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket26}"

    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: !Ref RDSDBParameterGroup
            AllocatedStorage: 50
            DBInstanceClass: "db.t4g.small"
            Engine: "postgres"
            MasterUsername: "postgres"
            MasterUserPassword: "REPLACEME"
            PreferredBackupWindow: "08:28-08:58"
            BackupRetentionPeriod: 7
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            PreferredMaintenanceWindow: "sat:07:09-sat:07:39"
            MultiAZ: true
            EngineVersion: "13.10"
            AutoMinorVersionUpgrade: true
            LicenseModel: "postgresql-license"
            PubliclyAccessible: false
            StorageType: "gp2"
            Port: 5432
            StorageEncrypted: true
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/c329bfeb-c72f-4e4f-9340-38eed1543b54"
            CopyTagsToSnapshot: true
            MonitoringInterval: 60
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: true
            PerformanceInsightsKMSKeyId: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:key/c329bfeb-c72f-4e4f-9340-38eed1543b54"
            PerformanceInsightsRetentionPeriod: 7
            DeletionProtection: true
            DBSubnetGroupName: !Sub "${ECSCluster2}-${EC2VPC}"
            VPCSecurityGroups:
              - !Ref EC2SecurityGroup4
            MaxAllocatedStorage: 1000
            DBParameterGroupName: !Ref RDSDBParameterGroup
            OptionGroupName: !Sub "${ECSCluster2}:postgres-13"
            MonitoringRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole23}"
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            DBSubnetGroupName: !Sub "${ECSCluster2}-${EC2VPC}"
            SubnetIds:
              - !Ref EC2Subnet2
              - !Ref EC2Subnet4
              - !Ref EC2Subnet5
              - !Ref EC2Subnet6

    RDSDBSubnetGroup2:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Private subnet group for Scarif"
            DBSubnetGroupName: "private subnet group"
            SubnetIds:
              - !Ref EC2Subnet2
              - !Ref EC2Subnet5
              - !Ref EC2Subnet6

    RDSDBParameterGroup:
        Type: "AWS::RDS::DBParameterGroup"
        Properties:
            DBClusterParameterGroupName: !Ref RDSDBInstance
            Description: !Ref RDSDBInstance
            Family: "postgres13"
            Parameters:
                "cron.database_name": !Ref RDSDBInstance
                shared_preload_libraries: "pg_stat_statements,pg_cron"

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.233.160.0/20"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: !Ref ECSCluster2
            Tags:
              -
                Key: "Name"
                Value: "dev"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.233.164.0/22"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-0"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.233.163.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-1"

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet5.AvailabilityZone
            CidrBlock: "10.233.161.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-public-2"

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.233.168.0/22"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-1"

    EC2Subnet5:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "10.233.163.128/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-2"

    EC2Subnet6:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.233.162.128/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-0"

    EC2Subnet7:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.233.160.128/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-public-1"

    EC2Subnet8:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.233.160.0/25"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-public-0"

    EC2Subnet9:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "10.233.172.0/22"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-2"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
              -
                Key: "Name"
                Value: "dev"

    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2EIPAssociation:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP.AllocationId
            NetworkInterfaceId: "eni-0f8fcb4e5c1e1c014"
            PrivateIpAddress: "10.233.160.96"

    EC2VPCDHCPOptionsAssociation:
        Type: "AWS::EC2::VPCDHCPOptionsAssociation"
        Properties:
            DhcpOptionsId: "dopt-085423ad6d6245e6f"
            VpcId: !Ref EC2VPC

    EC2NetworkAcl:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-public-subnets"
              -
                Key: "public"
                Value: "True"

    EC2NetworkAcl2:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-subnets"

    EC2NetworkAcl3:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-subnets"

    EC2NetworkAclEntry:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry2:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 80
                To: 80
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 110

    EC2NetworkAclEntry3:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 443
                To: 443
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 120

    EC2NetworkAclEntry4:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 32768
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 130

    EC2NetworkAclEntry5:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 12345
                To: 12345
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 140

    EC2NetworkAclEntry6:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 0
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 150

    EC2NetworkAclEntry7:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 0
                To: 65535
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 160

    EC2NetworkAclEntry8:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "69.243.110.41/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 90

    EC2NetworkAclEntry9:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "66.44.59.31/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 91

    EC2NetworkAclEntry10:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "69.144.116.166/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 92

    EC2NetworkAclEntry11:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "73.3.170.14/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 93

    EC2NetworkAclEntry12:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "71.115.29.41/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 94

    EC2NetworkAclEntry13:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "108.51.131.125/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 95

    EC2NetworkAclEntry14:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "184.96.240.95/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 96

    EC2NetworkAclEntry15:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "168.245.155.26/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 97

    EC2NetworkAclEntry16:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "184.96.253.233/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 98

    EC2NetworkAclEntry17:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "73.201.219.216/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 99

    EC2NetworkAclEntry18:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "158.184.209.19/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry19:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 80
                To: 80
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 110

    EC2NetworkAclEntry20:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 443
                To: 443
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 120

    EC2NetworkAclEntry21:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 1024
                To: 3388
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 130

    EC2NetworkAclEntry22:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 51678
                To: 51680
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 140

    EC2NetworkAclEntry23:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 12345
                To: 12345
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 150

    EC2NetworkAclEntry24:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl
            PortRange:
                From: 3390
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 160

    EC2NetworkAclEntry25:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.162.128/25"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry26:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.163.0/25"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 105

    EC2NetworkAclEntry27:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.163.128/25"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 110

    EC2NetworkAclEntry28:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.164.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 200

    EC2NetworkAclEntry29:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.168.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 205

    EC2NetworkAclEntry30:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.172.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 210

    EC2NetworkAclEntry31:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 0
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 400

    EC2NetworkAclEntry32:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.0.0.0/8"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 605

    EC2NetworkAclEntry33:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "172.16.0.0/12"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 615

    EC2NetworkAclEntry34:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "192.168.0.0/16"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 625

    EC2NetworkAclEntry35:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 53
                To: 53
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 997

    EC2NetworkAclEntry36:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 1024
                To: 65535
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 998

    EC2NetworkAclEntry37:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 123
                To: 123
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 999

    EC2NetworkAclEntry38:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.162.128/25"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry39:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.163.0/25"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 105

    EC2NetworkAclEntry40:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.163.128/25"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 110

    EC2NetworkAclEntry41:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.164.0/22"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 200

    EC2NetworkAclEntry42:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.168.0/22"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 205

    EC2NetworkAclEntry43:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.172.0/22"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 210

    EC2NetworkAclEntry44:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 3390
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 400

    EC2NetworkAclEntry45:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.0.0.0/8"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 600

    EC2NetworkAclEntry46:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "172.16.0.0/12"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 610

    EC2NetworkAclEntry47:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "192.168.0.0/16"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 620

    EC2NetworkAclEntry48:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 123
                To: 123
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 998

    EC2NetworkAclEntry49:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl2
            PortRange:
                From: 3390
                To: 65535
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 999

    EC2NetworkAclEntry50:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.164.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2NetworkAclEntry51:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.168.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 105

    EC2NetworkAclEntry52:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.233.172.0/22"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 110

    EC2NetworkAclEntry53:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.0.0.0/8"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 605

    EC2NetworkAclEntry54:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "172.16.0.0/12"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 615

    EC2NetworkAclEntry55:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "192.168.0.0/16"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 625

    EC2NetworkAclEntry56:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 0
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 1000

    EC2NetworkAclEntry57:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 0
                To: 65535
            Protocol: 17
            RuleAction: "allow"
            RuleNumber: 1100

    EC2NetworkAclEntry58:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 80
                To: 80
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 120

    EC2NetworkAclEntry59:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 443
                To: 443
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 130

    EC2NetworkAclEntry60:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "73.3.170.14/32"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 22
                To: 22
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 140

    EC2NetworkAclEntry61:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 3390
                To: 65535
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 400

    EC2NetworkAclEntry62:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "10.0.0.0/8"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 600

    EC2NetworkAclEntry63:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "172.16.0.0/12"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 610

    EC2NetworkAclEntry64:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "192.168.0.0/16"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 620

    EC2NetworkAclEntry65:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref EC2NetworkAcl3
            PortRange:
                From: 1024
                To: 3388
            Protocol: 6
            RuleAction: "allow"
            RuleNumber: 997

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-1"

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-public"

    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-0"

    EC2RouteTable4:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-2"

    EC2RouteTable5:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-1"

    EC2RouteTable6:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-app-0"

    EC2RouteTable7:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "dev-private-persistence-2"

    EC2RouteTable8:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway2
            RouteTableId: !Ref EC2RouteTable

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            GatewayId: "vpce-03de32c6bb791d442"
            RouteTableId: !Ref EC2RouteTable

    EC2Route3:
        Type: "AWS::EC2::Route"
        Properties:
            GatewayId: "vpce-05a2f2393597a64bc"
            RouteTableId: !Ref EC2RouteTable

    EC2Route4:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet9
            Tags:
              -
                Key: "Name"
                Value: "geo-3"

    EC2NatGateway2:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet8
            Tags:
              -
                Key: "Name"
                Value: "dev-nat-gateway-0"
            AllocationId: !GetAtt EC2EIP.AllocationId

    EC2NatGateway3:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet4
            Tags:
              -
                Key: "Name"
                Value: "geo2"

    EC2NatGateway4:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet
            Tags:
              -
                Key: "Name"
                Value: "geo-1"

    EC2VPCEndpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref EC2VPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds:
              - !Ref EC2RouteTable
              - !Ref EC2RouteTable2
              - !Ref EC2RouteTable3
              - !Ref EC2RouteTable4
              - !Ref EC2RouteTable5
              - !Ref EC2RouteTable6
              - !Ref EC2RouteTable7
            PrivateDnsEnabled: false

    EC2VPCEndpoint2:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref EC2VPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds:
              - !Ref EC2RouteTable
              - !Ref EC2RouteTable2
              - !Ref EC2RouteTable3
              - !Ref EC2RouteTable4
              - !Ref EC2RouteTable5
              - !Ref EC2RouteTable6
              - !Ref EC2RouteTable7
            PrivateDnsEnabled: false

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2SubnetNetworkAclAssociation:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet3
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation2:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet7
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation3:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet8
            NetworkAclId: !Ref EC2NetworkAcl

    EC2SubnetNetworkAclAssociation4:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet5
            NetworkAclId: !Ref EC2NetworkAcl2

    EC2SubnetNetworkAclAssociation5:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet2
            NetworkAclId: !Ref EC2NetworkAcl2

    EC2SubnetNetworkAclAssociation6:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet6
            NetworkAclId: !Ref EC2NetworkAcl2

    EC2SubnetNetworkAclAssociation7:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet9
            NetworkAclId: !Ref EC2NetworkAcl3

    EC2SubnetNetworkAclAssociation8:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet4
            NetworkAclId: !Ref EC2NetworkAcl3

    EC2SubnetNetworkAclAssociation9:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        Properties:
            SubnetId: !Ref EC2Subnet
            NetworkAclId: !Ref EC2NetworkAcl3

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet7

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet3

    EC2SubnetRouteTableAssociation4:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet8

    EC2SubnetRouteTableAssociation5:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet6

    EC2SubnetRouteTableAssociation6:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable4
            SubnetId: !Ref EC2Subnet9

    EC2SubnetRouteTableAssociation7:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable5
            SubnetId: !Ref EC2Subnet4

    EC2SubnetRouteTableAssociation8:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable6
            SubnetId: !Ref EC2Subnet

    EC2SubnetRouteTableAssociation9:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable7
            SubnetId: !Ref EC2Subnet5

    EC2PrefixList:
        Type: "AWS::EC2::PrefixList"
        Properties:
            AddressFamily: "IPv4"
            PrefixListName: "test_prefix_list"
            MaxEntries: 20
            Entries:
              -
                Cidr: "71.115.29.41/32"
                Description: "Ryan"
              -
                Cidr: "158.184.209.103/32"
                Description: "Martin-Arlington"
              -
                Cidr: "168.245.155.0/25"
                Description: "DIA2"
              -
                Cidr: "69.144.116.166/32"
                Description: "Katie"
              -
                Cidr: "100.15.227.160/32"
                Description: "Martin"
              -
                Cidr: "66.44.59.31/32"
                Description: "Mary"
              -
                Cidr: "73.3.170.14/32"
                Description: "Phil"
              -
                Cidr: "184.96.225.238/32"
                Description: "Dennis"
              -
                Cidr: "73.201.219.216/32"
                Description: "Jim"
              -
                Cidr: "69.250.163.49/32"
                Description: "Joe"
              -
                Cidr: "168.245.155.26/32"
                Description: "DIA"
              -
                Cidr: "68.39.160.171/32"
                Description: "Jacob"

    EC2NetworkInsightsPath:
        Type: "AWS::EC2::NetworkInsightsPath"
        Properties:
            Destination: "eni-06c463267e33378da"
            Protocol: "tcp"
            Source: "i-036d3c59a6df89089"

    EC2NetworkInsightsPath2:
        Type: "AWS::EC2::NetworkInsightsPath"
        Properties:
            Destination: "i-036d3c59a6df89089"
            Protocol: "tcp"
            Source: "eni-06c463267e33378da"

    EC2NetworkInsightsPath3:
        Type: "AWS::EC2::NetworkInsightsPath"
        Properties:
            Destination: "eni-06c463267e33378da"
            Protocol: "tcp"
            Source: "i-036d3c59a6df89089"

    EC2NetworkInsightsAnalysis:
        Type: "AWS::EC2::NetworkInsightsAnalysis"
        Properties:
            NetworkInsightsPathId: !Ref EC2NetworkInsightsPath

    EC2NetworkInsightsAnalysis2:
        Type: "AWS::EC2::NetworkInsightsAnalysis"
        Properties:
            NetworkInsightsPathId: !Ref EC2NetworkInsightsPath2

    EC2NetworkInsightsAnalysis3:
        Type: "AWS::EC2::NetworkInsightsAnalysis"
        Properties:
            NetworkInsightsPathId: !Ref EC2NetworkInsightsPath2

    EC2NetworkInsightsAnalysis4:
        Type: "AWS::EC2::NetworkInsightsAnalysis"
        Properties:
            NetworkInsightsPathId: !Ref EC2NetworkInsightsPath3

    EC2NetworkInsightsAccessScope:
        Type: "AWS::EC2::NetworkInsightsAccessScope"
        Properties:
            Tags:
              -
                Key: "Description"
                Value: "Identify ingress paths into your VPCs from Internet Gateways, Peering Connections, VPC Service Endpoints, VPN and Transit Gateways."
              -
                Key: "Name"
                Value: "AWS-VPC-Ingress (Amazon created)"

    EC2NetworkInsightsAccessScope2:
        Type: "AWS::EC2::NetworkInsightsAccessScope"
        Properties:
            Tags:
              -
                Key: "Description"
                Value: "Identify egress paths to Internet Gateways, Peering Connections, VPC Endpoints, VPN and Transit Gateways from all of your VPCs."
              -
                Key: "Name"
                Value: "AWS-VPC-Egress (Amazon created)"

    EC2NetworkInsightsAccessScope3:
        Type: "AWS::EC2::NetworkInsightsAccessScope"
        Properties:
            Tags:
              -
                Key: "Description"
                Value: "Identify egress paths from all Network Interfaces to Internet Gateways."
              -
                Key: "Name"
                Value: "AWS-IGW-Egress (Amazon created)"

    EC2NetworkInsightsAccessScope4:
        Type: "AWS::EC2::NetworkInsightsAccessScope"
        Properties:
            Tags:
              -
                Key: "Description"
                Value: "Identify ingress paths from Internet Gateways to all Network Interfaces."
              -
                Key: "Name"
                Value: "All-IGW-Ingress (Amazon created)"

    Route53HostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: !Ref Route53RecordSet

    Route53HostedZone2:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: !Sub "${S3Bucket17}."
            VPCs:
              -
                VPCRegion: !Ref AWS::Region
                VPCId: !Ref EC2VPC

    Route53RecordSet:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet2
            Type: "NS"
            TTL: 172800
            ResourceRecords:
              - "ns-1036.awsdns-01.org."
              - "ns-301.awsdns-37.com."
              - "ns-946.awsdns-54.net."
              - "ns-1728.awsdns-24.co.uk."
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet2:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet
            Type: "SOA"
            TTL: 900
            ResourceRecords:
              - "ns-1036.awsdns-01.org. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400"
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet3:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "\\052.${Route53RecordSet}"
            Type: "A"
            AliasTarget:
                HostedZoneId: !GetAtt ElasticLoadBalancingV2LoadBalancer3.CanonicalHostedZoneID
                DNSName: !Sub "${ElasticLoadBalancingV2LoadBalancer3.DNSName}."
                EvaluateTargetHealth: true
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet4:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "_828691e0dec85fa115236944df6afabb.${Route53RecordSet}"
            Type: "CNAME"
            TTL: 300
            ResourceRecords:
              - "_3e79c8473d6ff27a66ddac4aafde8d5e.kzhndfqvzk.acm-validations.aws."
            HostedZoneId: !Ref Route53HostedZone

    Route53RecordSet5:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "${S3Bucket17}."
            Type: "NS"
            TTL: 172800
            ResourceRecords:
              - "ns-1536.awsdns-00.co.uk."
              - "ns-0.awsdns-00.com."
              - "ns-1024.awsdns-00.org."
              - "ns-512.awsdns-00.net."
            HostedZoneId: !Ref Route53HostedZone2

    Route53RecordSet6:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "${S3Bucket17}."
            Type: "SOA"
            TTL: 15
            ResourceRecords:
              - "ns-1536.awsdns-00.co.uk. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400"
            HostedZoneId: !Ref Route53HostedZone2

    ServiceDiscoveryPrivateDnsNamespace:
        Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
        Properties:
            Name: !Ref S3Bucket17

    ServiceDiscoveryService:
        Type: "AWS::ServiceDiscovery::Service"
        Properties:
            Name: !Sub "${S3Bucket17}-rmq"
            NamespaceId: "ns-7mfunsleoaluy2qk"
            DnsConfig:
                DnsRecords:
                  -
                    Type: "SRV"
                    TTL: 60
                NamespaceId: "ns-7mfunsleoaluy2qk"
                RoutingPolicy: "MULTIVALUE"
            HealthCheckCustomConfig:
                FailureThreshold: 1

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "servicecatalog-puppet-deploy-in-spoke"
            Description: "runs puppet in the spoke account"
            Source:
                BuildSpec: |
                    version: 0.2
                    phases:
                      install:
                        runtime-versions:
                          python: 3.7
                        commands:
                          - echo $VERSION
                          - bash -c "if [[ $VERSION =~ 'http'  ]]; then pip install $VERSION ; else pip install aws-service-catalog-puppet==$VERSION; fi"
                    
                    
                      build:
                        commands:
                          - curl $MANIFEST_URL > manifest-expanded.yaml
                          - >
                            servicecatalog-puppet --info deploy \
                                --execution-mode spoke \
                                --puppet-account-id $PUPPET_ACCOUNT_ID \
                                --single-account $(aws sts get-caller-identity --query Account --output text) \
                                --home-region $HOME_REGION \
                                --regions $REGIONS \
                                --should-collect-cloudformation-events $SHOULD_COLLECT_CLOUDFORMATION_EVENTS \
                                --should-forward-events-to-eventbridge $SHOULD_FORWARD_EVENTS_TO_EVENTBRIDGE \
                                --should-forward-failures-to-opscenter $SHOULD_FORWARD_FAILURES_TO_OPSCENTER \
                                manifest-expanded.yaml
                    artifacts:
                      files:
                        - results/*/*
                        - output/*/*
                      name: DeployInSpokeProject

                InsecureSsl: false
                Type: "NO_SOURCE"
            Artifacts:
                Type: "NO_ARTIFACTS"
            Cache:
                Type: "NO_CACHE"
            Environment:
                ComputeType: "BUILD_GENERAL1_SMALL"
                EnvironmentVariables:
                  -
                    Name: "VERSION"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "MANIFEST_URL"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "NUM_WORKERS"
                    Type: "PLAINTEXT"
                    Value: "10"
                  -
                    Name: "PUPPET_ACCOUNT_ID"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "HOME_REGION"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "REGIONS"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "SHOULD_COLLECT_CLOUDFORMATION_EVENTS"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "SHOULD_FORWARD_EVENTS_TO_EVENTBRIDGE"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "SHOULD_FORWARD_FAILURES_TO_OPSCENTER"
                    Type: "PLAINTEXT"
                    Value: "CHANGE_ME"
                  -
                    Name: "PARTITION"
                    Type: "PLAINTEXT"
                    Value: "aws"
                  -
                    Name: "PUPPET_ROLE_NAME"
                    Type: "PLAINTEXT"
                    Value: !Ref IAMRole27
                  -
                    Name: "PUPPET_ROLE_PATH"
                    Type: "PLAINTEXT"
                    Value: "/servicecatalog-puppet/"
                Image: "aws/codebuild/standard:4.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/servicecatalog-puppet/${IAMRole21}"
            TimeoutInMinutes: 480
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${EC2PrefixList.OwnerId}:alias/aws/s3"
            Tags:
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Framework"
            BadgeEnabled: false
            Visibility: "PRIVATE"

    CloudWatchAlarm:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            AlarmName: !Sub "${ECSService8.Name}-alarm"
            ActionsEnabled: true
            AlarmActions:
              - !Sub "arn:aws:sns:${AWS::Region}:${EC2PrefixList.OwnerId}:${SNSTopic.TopicName}"
            EvaluationPeriods: 1
            DatapointsToAlarm: 1
            ComparisonOperator: "LessThanLowerOrGreaterThanUpperThreshold"
            TreatMissingData: "missing"
            Metrics:
              -
                Id: "m1"
                MetricStat:
                    Metric:
                        Namespace: "AWS/ECS"
                        MetricName: "CPUUtilization"
                        Dimensions:
                          -
                            Name: "ServiceName"
                            Value: !GetAtt ECSService8.Name
                          -
                            Name: "ClusterName"
                            Value: !Ref ECSCluster4
                    Period: 60
                    Stat: "Average"
                ReturnData: true
              -
                Id: "ad1"
                Expression: "ANOMALY_DETECTION_BAND(m1, 1)"
                Label: "CPUUtilization (expected)"
                ReturnData: true
            ThresholdMetricId: "ad1"

    CloudWatchAlarm2:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            AlarmName: !Sub "${S3Bucket17}-worker-required"
            ActionsEnabled: true
            AlarmActions:
              - !Sub "arn:aws:autoscaling:${AWS::Region}:${EC2PrefixList.OwnerId}:scalingPolicy:d8966b21-3831-4256-8778-cb683845a94f:resource/ecs/service/${ECSCluster3}/${S3Bucket17}-pipeline:policyName/ScaleOutPolicy"
            MetricName: "gn_worker"
            Namespace: "rabbitmq.depth"
            Statistic: "Maximum"
            Period: 60
            EvaluationPeriods: 1
            DatapointsToAlarm: 1
            Threshold: 1
            ComparisonOperator: "GreaterThanOrEqualToThreshold"
            TreatMissingData: "missing"

    CloudWatchAlarm3:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            AlarmName: !Sub "no-${S3Bucket17}-worker-required"
            ActionsEnabled: true
            AlarmActions:
              - !Sub "arn:aws:autoscaling:${AWS::Region}:${EC2PrefixList.OwnerId}:scalingPolicy:d8966b21-3831-4256-8778-cb683845a94f:resource/ecs/service/${ECSCluster3}/${S3Bucket17}-pipeline:policyName/ScaleInPolicy"
            MetricName: "gn_worker"
            Namespace: "rabbitmq.depth"
            Statistic: "Maximum"
            Period: 60
            EvaluationPeriods: 60
            DatapointsToAlarm: 60
            Threshold: 1
            ComparisonOperator: "LessThanThreshold"
            TreatMissingData: "missing"

    LogsLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"

    LogsLogGroup2:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws-glue/jobs/logs-v2"

    LogsLogGroup3:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws-glue/jobs/output"
            RetentionInDays: 7

    LogsLogGroup4:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            RetentionInDays: 1

    LogsLogGroup5:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            RetentionInDays: 1

    LogsLogGroup6:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/lambda/SC-${EC2PrefixList.OwnerId}-pp-3rqnau-DefaultVpcDeletionFuncti-NObVQMtp1DLE"
            RetentionInDays: 90

    LogsLogGroup7:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"

    LogsLogGroup8:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"

    LogsLogGroup9:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "RDSOSMetrics"
            RetentionInDays: 30

    LogsLogGroup10:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            RetentionInDays: 731

    LogsLogGroup11:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "fallout-logs"

    LogsLogGroup12:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "log-factrac-api"

    LogsLogGroup13:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "log-factrac-ui"

    LogsLogGroup14:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "log-pipeline"

    LogsLogGroup15:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs"
            RetentionInDays: 90

    LogsLogStream:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296"

    LogsLogStream2:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-0ac0f4eb5cafcb966ddc4e7f9783d81d13ff49b7"

    LogsLogStream3:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-76b58e2b7bb4b7db1d2be6999cd211278685f1f0"

    LogsLogStream4:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-a1ef7b19c8b23d6bb9a87d9883adc96f45b6b273"

    LogsLogStream5:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-bb328e5f7469d480311249a03509c30331caf979"

    LogsLogStream6:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-de948e4d9e98368f99730118c663da80b1730415"

    LogsLogStream7:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-deaf7b4fd7bcfb75af4324beeadbacae4e27db03"

    LogsLogStream8:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-ed50904629e154cc96ac7125ab22ebfcf438a494"

    LogsLogStream9:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-fb7eef6b3622775e238ca611e73b4368a08701e2"

    LogsLogStream10:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296_g-fd9e7d8e815d57e5c3ae53f6b6e0a9dfa8445e30"

    LogsLogStream11:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_3584dcd559a36f049858a482d6e228a5dd18376207f808ee87ab018184322d72"

    LogsLogStream12:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82"

    LogsLogStream13:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-5810f5d408900fb4f3c96183ec13c47d06029ed5"

    LogsLogStream14:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-5b72afdf2111fcc847addc7577ef6a36d4ec7ad9"

    LogsLogStream15:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-663851899f3c75e50271ce01229e52c4a4c598f7"

    LogsLogStream16:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-7bacb41377fcf106f7ea800a9dd52c0f41f72f21"

    LogsLogStream17:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-8f56fb14fb57c44c4802e3fa94df64cb0779cf91"

    LogsLogStream18:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-b825e717b999b45c35c0568b1fd26002813ff6e3"

    LogsLogStream19:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-c7d5192d4416d0e9e20f748d3ce18b5dd88c4f57"

    LogsLogStream20:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-e62f0ab0f9372bc07e589ada2843d812f524cf2f"

    LogsLogStream21:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82_g-f18aa4abe279609b022462e930af716312e3d4f4"

    LogsLogStream22:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/error"
            LogStreamName: "jr_67bf2c6e8dc62c23ce68d5bcbd146bf60628c465906a34402dfdf50f0aa5ce45"

    LogsLogStream23:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/logs-v2"
            LogStreamName: "-null"

    LogsLogStream24:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/logs-v2"
            LogStreamName: "jr_2b08b207256b5d4cb67460e6b888cb561b2f45f69fe9897af5bfeddaf1e67296-driver"

    LogsLogStream25:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws-glue/jobs/logs-v2"
            LogStreamName: "jr_4fa798bbef076848561d319c3bb618f85edffba6f9dfe45ac0a71d5c87c7ff82-driver"

    LogsLogStream26:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-0860de070afc453a8797f75d1b87d124"

    LogsLogStream27:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-1a4d568c370445e2871f85eb256c819e"

    LogsLogStream28:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-1f24cac220a54af3b90c013af36ab59c"

    LogsLogStream29:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-31dfa82ba0344566b996742632d75867"

    LogsLogStream30:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-39f25d1ac01e466b9466936835d5dac4"

    LogsLogStream31:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-3bce57f105894e5bb9affcbc7f81d834"

    LogsLogStream32:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-451e3b689a644e338ef628c6e9a429cc"

    LogsLogStream33:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-4b3c64c36b57498bb46d4c1f518f40c7"

    LogsLogStream34:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-558df0ef3d1248c29ebf5208d54a4162"

    LogsLogStream35:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-57b00c345b13424690af6a7ad7d50a0d"

    LogsLogStream36:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-5d8a09a08c354ef0b25b8b48cd5d23cd"

    LogsLogStream37:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-60b4b591e48046f49c60af01a0336c33"

    LogsLogStream38:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-62a7fc1a1d624b0aa463c3ea060675c8"

    LogsLogStream39:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-65a9904700624900b5ffc83c58a3b2cb"

    LogsLogStream40:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-66769c8cbdd043ccbdba6d59712bdd57"

    LogsLogStream41:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-66a40116a91a491a946813b7799171c7"

    LogsLogStream42:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-69556490d3b34a678b8770f9c53c32b7"

    LogsLogStream43:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-6e0f437336374a25ae690cc8b390b638"

    LogsLogStream44:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-7556136fdd7f4200bd678fa35e896fa4"

    LogsLogStream45:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-7633ff7c44b144efac2703b459c4963e"

    LogsLogStream46:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-77e1465711a142719e8f30f12393557b"

    LogsLogStream47:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-868942a60b61430db9a6d7bad1a87390"

    LogsLogStream48:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-89dcc52dafb0429a83053fe5e6129d78"

    LogsLogStream49:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-9289d250b22540a7a9d7ced99750db04"

    LogsLogStream50:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-9675000531d44432860c43ba85b53d5b"

    LogsLogStream51:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-98a265d6765b437a9b7b398044825ef2"

    LogsLogStream52:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-9f48ce4748bf422a86785af2b38edb04"

    LogsLogStream53:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-a12f07bf2d974102ae5fbadb15bad63a"

    LogsLogStream54:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-bb45c39154654ef7b3bc9b3f39fbd732"

    LogsLogStream55:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-c4455e0b48c047e9a8d969210d9e6068"

    LogsLogStream56:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-cadc305445644280a21f78cb607f38cf"

    LogsLogStream57:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-cba5bf66f096471685db418f138e2d11"

    LogsLogStream58:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-d1bdda5c053e4a70a5248c60fee7f631"

    LogsLogStream59:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-d22a6aeb1e784604bea86558d2c16ba0"

    LogsLogStream60:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-d2fdd129be5d4c15adf4e9b5a23e9510"

    LogsLogStream61:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-d7c398529ae74a5f97a6b5b4c4bca8cd"

    LogsLogStream62:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-ecbbd47986ac4b22a5a0f26a9143d4f3"

    LogsLogStream63:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: "AgentTelemetry-f857824127c244f292be5029264401e2"

    LogsLogStream64:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: !Sub "ClusterTelemetry-${ECSCluster}"

    LogsLogStream65:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: !Sub "ServiceTelemetry-${ECSService.Name}"

    LogsLogStream66:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster}/performance"
            LogStreamName: !Sub "ServiceTelemetry-${ElasticLoadBalancingV2TargetGroup8.TargetGroupName}-service"

    LogsLogStream67:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "AgentTelemetry-243630360b474515a6f1942df17a71e6"

    LogsLogStream68:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: !Sub "ClusterTelemetry-${ECSCluster4}"

    LogsLogStream69:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1028"

    LogsLogStream70:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1039"

    LogsLogStream71:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1044"

    LogsLogStream72:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1061"

    LogsLogStream73:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1093"

    LogsLogStream74:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1102"

    LogsLogStream75:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1131"

    LogsLogStream76:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1147"

    LogsLogStream77:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1152"

    LogsLogStream78:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1215"

    LogsLogStream79:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1438"

    LogsLogStream80:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1461"

    LogsLogStream81:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1511"

    LogsLogStream82:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1514"

    LogsLogStream83:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1520"

    LogsLogStream84:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-1915"

    LogsLogStream85:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2049"

    LogsLogStream86:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2054"

    LogsLogStream87:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2308"

    LogsLogStream88:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2345"

    LogsLogStream89:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2361"

    LogsLogStream90:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2403"

    LogsLogStream91:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2409"

    LogsLogStream92:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2412"

    LogsLogStream93:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2519"

    LogsLogStream94:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2559"

    LogsLogStream95:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2726"

    LogsLogStream96:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2747"

    LogsLogStream97:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2748"

    LogsLogStream98:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2760"

    LogsLogStream99:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2765"

    LogsLogStream100:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2777"

    LogsLogStream101:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2798"

    LogsLogStream102:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2802"

    LogsLogStream103:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2803"

    LogsLogStream104:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2827"

    LogsLogStream105:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2850"

    LogsLogStream106:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2862"

    LogsLogStream107:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2870"

    LogsLogStream108:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2879"

    LogsLogStream109:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-2899"

    LogsLogStream110:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3105"

    LogsLogStream111:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3136"

    LogsLogStream112:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3145"

    LogsLogStream113:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3199"

    LogsLogStream114:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3211"

    LogsLogStream115:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3225"

    LogsLogStream116:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/ecs/containerinsights/${ECSCluster4}/performance"
            LogStreamName: "FargateTelemetry-3228"

    LogsLogStream117:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/SC-${EC2PrefixList.OwnerId}-pp-3rqnau-DefaultVpcDeletionFuncti-NObVQMtp1DLE"
            LogStreamName: "2021/11/02/[$LATEST]ec9b21cb80b343afab503ffc2d260c85"

    LogsLogStream118:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]4a347a63f8af4f31b23b577055c74c3f"

    LogsLogStream119:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]7abd4263ea93407fb810910d00a2e949"

    LogsLogStream120:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]80b1f1582a6b4b099d1b40cf962139b2"

    LogsLogStream121:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]98cabb44fe9d4a06a79bf8bbcea60c9f"

    LogsLogStream122:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]a0165f6f750e4c6f90feba2a4c0c3d34"

    LogsLogStream123:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]a086a9602ab548b7a1358fbf900d1cd2"

    LogsLogStream124:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]a51cb16446e04310b55fa69b140dd5c3"

    LogsLogStream125:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]b0e0fb67c64346a1997d2f3f03766f30"

    LogsLogStream126:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]c0c7485c37874669a0e40f6e6163fcaa"

    LogsLogStream127:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/12/[$LATEST]cf644f408c394baaa5a15331fdfc7cf0"

    LogsLogStream128:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]02506ad4a39c4caa9bc675fa7a7258ef"

    LogsLogStream129:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]0571e0fa7977445cbe85462438bd6b08"

    LogsLogStream130:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]121716e6465c446481baa5d9f8e973e2"

    LogsLogStream131:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]665d656ab6554f15bdab90adb86aa2bc"

    LogsLogStream132:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]7beffd51afb741e8808f14b3fd2f4bc2"

    LogsLogStream133:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]83b1cd9c1859451f955c83432050e077"

    LogsLogStream134:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]b2688c0a20b541d2be91575d75ac0358"

    LogsLogStream135:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]b3627801cd0844b096e9ef13e9666be6"

    LogsLogStream136:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]bdab24905bba427bbec478e1f64fdd64"

    LogsLogStream137:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]d3bd810778e44d11ba662c3df04f0535"

    LogsLogStream138:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]eb203e0b820c43e599efa06032006486"

    LogsLogStream139:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]f45edf7d7f3048c397fae8204fbb55a7"

    LogsLogStream140:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/13/[$LATEST]fd3ae0183871450d987d01b7d979f3c9"

    LogsLogStream141:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]0a922c3ad08744d3a86f08b8a087ca35"

    LogsLogStream142:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]152c93a6dd7c4f888c014e33817741d8"

    LogsLogStream143:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]1a4be21c2e0947e7abcfc41e03b60288"

    LogsLogStream144:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]2905cf859db2452cbf26390e9a22b785"

    LogsLogStream145:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]3d9b2a1513134f2bb64ffe04e2dbece5"

    LogsLogStream146:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]414cfee7dcaf479c9cd0889bc1439da8"

    LogsLogStream147:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]427a97aa1b4449169a4c78fdf7f4e92a"

    LogsLogStream148:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]54392015a96a4ed3833381f808b52908"

    LogsLogStream149:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]57fd598fcd37477eb44545d60e57f64b"

    LogsLogStream150:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]bbd77cb8674e4c9f846fd15390ae3ebe"

    LogsLogStream151:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]be905314ed064b2fb490c3d18e4b8930"

    LogsLogStream152:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/14/[$LATEST]eba05df2ea5d42938ec5ee37c4a1f205"

    LogsLogStream153:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]155d26481a1846faa232752524be61e9"

    LogsLogStream154:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]246e465ecb074f70ad5267f1a74e97f0"

    LogsLogStream155:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]2b610a8797894fa592311f74ac861ecb"

    LogsLogStream156:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]352d89eb12964023bcc6f7ff2ab9a8aa"

    LogsLogStream157:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]373ac0e9b2bc4aaf8dbd20093ba910a4"

    LogsLogStream158:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]486b2e1ece91487e8a7e49a780a69fa9"

    LogsLogStream159:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]52ea4ab147f74c0d87d3dfe9a90a0efd"

    LogsLogStream160:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]6736a960346a46a4b50a210d4591719e"

    LogsLogStream161:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]6bccb0d28a1e4e55af6755e19f9d4827"

    LogsLogStream162:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]837a0229e57749c793b4a11d8743221a"

    LogsLogStream163:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]a3bd7e182b9640a384c073cb93c25681"

    LogsLogStream164:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]d2f45f14853b4042825d28e0977bbb56"

    LogsLogStream165:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/15/[$LATEST]f58746fca461472d8adc1e37cb7fa710"

    LogsLogStream166:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/16/[$LATEST]0027d81820de47b393e63cc96f990244"

    LogsLogStream167:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
            LogStreamName: "2022/01/16/[$LATEST]04935fc367c34db4a20b57ed23ee1bc3"

    LogsLogStream168:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/AKL50-C1"

    LogsLogStream169:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/AKL50-C2"

    LogsLogStream170:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/AMS1-C1"

    LogsLogStream171:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/AMS50-C1"

    LogsLogStream172:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/AMS54-C1"

    LogsLogStream173:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ARN1-C1"

    LogsLogStream174:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ARN52-UC1"

    LogsLogStream175:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ARN52-UN1"

    LogsLogStream176:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ARN52-UO1"

    LogsLogStream177:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ARN54-C1"

    LogsLogStream178:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATH50-C1"

    LogsLogStream179:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL51-C1"

    LogsLogStream180:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL52-C1"

    LogsLogStream181:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL56-C1"

    LogsLogStream182:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL56-C2"

    LogsLogStream183:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL56-C3"

    LogsLogStream184:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/ATL56-C4"

    LogsLogStream185:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BAH53-C1"

    LogsLogStream186:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BKK50-C1"

    LogsLogStream187:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BKK50-C2"

    LogsLogStream188:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BLR50-C1"

    LogsLogStream189:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BLR50-C2"

    LogsLogStream190:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BLR50-C3"

    LogsLogStream191:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOG50-C1"

    LogsLogStream192:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM50-C1"

    LogsLogStream193:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM52-C1"

    LogsLogStream194:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM52-UC1"

    LogsLogStream195:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM52-UN1"

    LogsLogStream196:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM52-UO1"

    LogsLogStream197:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM52-UU1"

    LogsLogStream198:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM54-UO1"

    LogsLogStream199:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOM54-UU1"

    LogsLogStream200:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOS50-C1"

    LogsLogStream201:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BOS50-C2"

    LogsLogStream202:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/BUD50-C1"

    LogsLogStream203:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CCU50-C1"

    LogsLogStream204:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CCU50-C2"

    LogsLogStream205:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CDG3-C1"

    LogsLogStream206:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CDG3-C2"

    LogsLogStream207:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CDG50-C1"

    LogsLogStream208:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CDG50-C2"

    LogsLogStream209:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CDG53-C1"

    LogsLogStream210:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH50-UC1"

    LogsLogStream211:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH50-UN1"

    LogsLogStream212:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH50-UO1"

    LogsLogStream213:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH50-UU1"

    LogsLogStream214:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH51-UC1"

    LogsLogStream215:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH51-UN1"

    LogsLogStream216:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH51-UO1"

    LogsLogStream217:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "/aws/route53/rapidprototypeteam.net"
            LogStreamName: !Sub "${Route53HostedZone}/CMH51-UU1"

    LogsLogStream218:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-6SYKCDFRCCQILE7HAFKEZCFQ5A"

    LogsLogStream219:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-W56GBIVGA5LU54YCSZDP3QEQMI"

    LogsLogStream220:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-W56GBIVGA5LU54YCSZDP3QEQMI-secondary"

    LogsLogStream221:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-X3ZB4LHW2VHPJ7EJRXO5Z62ANE"

    LogsLogStream222:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-X3ZB4LHW2VHPJ7EJRXO5Z62ANE-secondary"

    LogsLogStream223:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "fallout-logs"
            LogStreamName: !GetAtt ElasticLoadBalancingV2TargetGroup5.TargetGroupName

    LogsLogStream224:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000023c241f32c4de-reject"

    LogsLogStream225:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000294f2586276f3-reject"

    LogsLogStream226:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000041d33576e2227-reject"

    LogsLogStream227:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000424361630efa0-reject"

    LogsLogStream228:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00005c633b66a40db-reject"

    LogsLogStream229:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000687766df8df99-reject"

    LogsLogStream230:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00007cec24f8450c2-reject"

    LogsLogStream231:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00007d0a9cf618d93-reject"

    LogsLogStream232:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00008f75867bbe10a-reject"

    LogsLogStream233:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000097d2faaa62cb4-reject"

    LogsLogStream234:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000c480dad6721c6-reject"

    LogsLogStream235:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000c7bcf7d84db8b-reject"

    LogsLogStream236:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0000f10cbef08847c-reject"

    LogsLogStream237:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000127d06b4089118-reject"

    LogsLogStream238:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00012e22cd303a424-reject"

    LogsLogStream239:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000172dd6ef8907c5-reject"

    LogsLogStream240:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00017a7c5440343b5-reject"

    LogsLogStream241:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00017b014a8aca080-reject"

    LogsLogStream242:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000183c0fe6e67dcd-reject"

    LogsLogStream243:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0001851223301407e-reject"

    LogsLogStream244:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00018566ae3f4929a-reject"

    LogsLogStream245:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00019dabd972764be-reject"

    LogsLogStream246:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0001c9093cbd0b862-reject"

    LogsLogStream247:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0001ce5d365374018-reject"

    LogsLogStream248:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0002006ec354659f8-reject"

    LogsLogStream249:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000205065687cfa39-reject"

    LogsLogStream250:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00021344f879656a1-reject"

    LogsLogStream251:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000238d37ba3b57c3-reject"

    LogsLogStream252:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000288ab2bfbf348e-reject"

    LogsLogStream253:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0002a126c0f521601-reject"

    LogsLogStream254:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0002d9577dec04f58-reject"

    LogsLogStream255:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0002e86238c1c8050-reject"

    LogsLogStream256:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0002ebf6a84b873b1-reject"

    LogsLogStream257:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000307209caba82f3-reject"

    LogsLogStream258:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00031d201d763be6e-reject"

    LogsLogStream259:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003383355b94cafa-reject"

    LogsLogStream260:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00034522f1f2ec091-reject"

    LogsLogStream261:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-000349093920a53ad-reject"

    LogsLogStream262:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00035ab515c81875c-reject"

    LogsLogStream263:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00038779f7faea246-reject"

    LogsLogStream264:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00039efbc5cb36fa0-reject"

    LogsLogStream265:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003ca791dd142246-reject"

    LogsLogStream266:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003dc5424b205d99-reject"

    LogsLogStream267:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003e3de54646d07c-reject"

    LogsLogStream268:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003f1d0cd0b852d8-reject"

    LogsLogStream269:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003f38f8f1463e64-reject"

    LogsLogStream270:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003f50d7bddcb943-reject"

    LogsLogStream271:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-0003f854e46b47cbb-reject"

    LogsLogStream272:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00040ece340014027-reject"

    LogsLogStream273:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "dev-vpc-flow-logs"
            LogStreamName: "eni-00043376ded15c11e-reject"

    LogsLogStream274:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0000411c367744db98f3542af4f04de9"

    LogsLogStream275:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0000bcd9dd644248bca3360eb6ecf8df"

    LogsLogStream276:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00011da23b184dbfaefcf2ddd327fbf7"

    LogsLogStream277:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00016d7520cf4dab986b8a438be018dd"

    LogsLogStream278:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00021fa4e2934111951d05d0bcfdc50a"

    LogsLogStream279:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0003913fea444c09a1c1537df64aa2d6"

    LogsLogStream280:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0004e9d9712f4a65a8f992854b3efb3e"

    LogsLogStream281:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00051976951d4f1fb12129708687c7b7"

    LogsLogStream282:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0005aaffb8c04669a0268f4bc1b8834e"

    LogsLogStream283:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0005ce3393b74ce8a0bb7c234dea4303"

    LogsLogStream284:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000619d3097147c6a4bf0156572aee11"

    LogsLogStream285:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000863cb28c84dd1a122c64375a59b81"

    LogsLogStream286:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0008a4d8a9d545d9847d6b5719dcf0dc"

    LogsLogStream287:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0008cbb7cd654814a5acf0df20306a9f"

    LogsLogStream288:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0008cbfbd35b407682a5cc6049f4bfcb"

    LogsLogStream289:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0009757a010d4866b199fe51228b938a"

    LogsLogStream290:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000abcd380bc49efb3cb1fd6a522c1fc"

    LogsLogStream291:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000b23a681bf41f08cb68d6cdde786d2"

    LogsLogStream292:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000b9e33411c4f688c7ab3cfb3e569b3"

    LogsLogStream293:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000bc98076f94a78a9ec5dae534b2f77"

    LogsLogStream294:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000bdef99dac4ec3b8e32f0e6f25d1cb"

    LogsLogStream295:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000c4a2143914be6a533d4619226227b"

    LogsLogStream296:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000cd3d25db640af930a0a2501aa46e0"

    LogsLogStream297:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000d9de1b8d548778daa7b7a5311b5db"

    LogsLogStream298:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000e2960d42d4670b0c060e97597406e"

    LogsLogStream299:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/000f3f50eb40446ab5ad69ec5e940fd6"

    LogsLogStream300:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0010173bedca4239bf3555dcc02ece8a"

    LogsLogStream301:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00103d7478e74276b4a5c87dbefc535f"

    LogsLogStream302:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001076db830440e0b6906760517bc6a3"

    LogsLogStream303:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00124746b062474d9a8f9b8b8b0b2746"

    LogsLogStream304:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0013c8fbc4d44a43a59df0b97ad6e050"

    LogsLogStream305:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00149346ee184ff7a77d26fa4783e670"

    LogsLogStream306:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/00158035af4e48ffa2c723bbbd1e04cf"

    LogsLogStream307:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0015f7d68db04303bb0d28ce1ada3ecc"

    LogsLogStream308:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001616880d9146f9a56fd971f6eed6ea"

    LogsLogStream309:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0016d88406d0437cbecf82f07674e6dc"

    LogsLogStream310:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/0018036c25784a51bc66f05ed138e677"

    LogsLogStream311:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001823f2da63422f96e990949884cd1e"

    LogsLogStream312:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001a11097670415598f80b49b8d3b672"

    LogsLogStream313:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001abd46fe884e2aa05ba6977ebf8a66"

    LogsLogStream314:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001acac518c043ba8381319b0e4954d2"

    LogsLogStream315:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001b2f30f67c463ea847e1ed948b59d0"

    LogsLogStream316:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001ba02f60974c09a334a63730106669"

    LogsLogStream317:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001bdae223c948e6a6d8d8c9aa53d1f4"

    LogsLogStream318:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001cb5a9b18042c7b6a2e3bc76939206"

    LogsLogStream319:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001cee2a347347ce989459fd12332429"

    LogsLogStream320:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001d60ce80f74f029f93389cc6d46ebe"

    LogsLogStream321:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001e0f15e03b46c698d3f11578683859"

    LogsLogStream322:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001e12fdc9104a93b50e2fe391bb08fd"

    LogsLogStream323:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-factrac-api"
            LogStreamName: "factrac-api/factrac-container/001e13eb2ce646b4a7027c937c6e51e1"

    LogsLogStream324:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00164185ff0d499fa771e0acac92e3a0"

    LogsLogStream325:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/001f9239c589403eaa5a92a0aaac27ad"

    LogsLogStream326:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00be8b3da212444bb797106bc900ed09"

    LogsLogStream327:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00dce5275f10490fa44803b65ad6eb24"

    LogsLogStream328:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00e37df2e2d34bef9b0ddabcfb6e86d6"

    LogsLogStream329:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00e54fb7d0f3461ca1fddb470ae30fb5"

    LogsLogStream330:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/00ea439a1f4d47afac964cce91920805"

    LogsLogStream331:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/015b516352c14f4da213bca82e2439ce"

    LogsLogStream332:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0167d197db6f4b33be4001bbae52fa50"

    LogsLogStream333:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/021f698a7d8a4d0880357d636165332e"

    LogsLogStream334:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/02336653451b443c929e6a2bf524bf61"

    LogsLogStream335:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/02e5f3f28cf4460b8cff9013d5da6905"

    LogsLogStream336:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/03d23a15a2f44b60a28901376a273972"

    LogsLogStream337:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0428fa232afb44f6b1fbca11b24d7b24"

    LogsLogStream338:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/04f766d11a0f40189d8642c018627a03"

    LogsLogStream339:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/04fbadf0d7b04ddd83dcf68f3117586c"

    LogsLogStream340:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/04fcd198b97c497ba21a51c0c40827fa"

    LogsLogStream341:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/051b8f5635834f1eb8866ed7e7580886"

    LogsLogStream342:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/055874a25d3947e3848f36f93d090c7f"

    LogsLogStream343:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/05fc5d60a1f44195a7a322d3253ce8a8"

    LogsLogStream344:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/061a886f39ff41d79711b08abfb7a834"

    LogsLogStream345:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/066ad98c813f4683923e5968d41f56a4"

    LogsLogStream346:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/06b6df9bde554dd391ac246b8c941f92"

    LogsLogStream347:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/06c89295d9274bc5827a6c339c8da7a4"

    LogsLogStream348:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/06fa978ec417468a8adf6c6e704d42f4"

    LogsLogStream349:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/07b5b03a2acb41a1931d36d660128078"

    LogsLogStream350:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/07e290ee179a46ec8d7f969f21f47779"

    LogsLogStream351:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/07e88409e66b49b7a818954d4c2c9895"

    LogsLogStream352:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/087aead87ebe4d818da2b2182a6b1794"

    LogsLogStream353:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/091093bab70146b386bae91e8d5a1f83"

    LogsLogStream354:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/09db40dee47a4c1081f0ba9b18cb8fb3"

    LogsLogStream355:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0a4d72b96e23421e867d70f8e96dd912"

    LogsLogStream356:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0a59763590a54859ac0618593a94e264"

    LogsLogStream357:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0b44f4141f5147a8bea8b8b940cd7c05"

    LogsLogStream358:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0b78f78d99d44fba88bc8ca67454c22f"

    LogsLogStream359:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0bddc70c781249619ff91d952ad86df6"

    LogsLogStream360:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0be00917a9c54778bef3326fc4d18270"

    LogsLogStream361:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0bebc859b74a4a679a805a339e5eac43"

    LogsLogStream362:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0c2b2fbc00004c05aaa3187ca367ce91"

    LogsLogStream363:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0c44949c14a044f89ecfd146232f87a3"

    LogsLogStream364:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0ce91b2d5ae04f4c822a6e61f49eb5cb"

    LogsLogStream365:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0cf034bbeb6245c8bc37cece7f4f13a2"

    LogsLogStream366:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0d0d14bbfda64d638eba5e2a4ddcf40d"

    LogsLogStream367:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0d6e7457558b48ceb779e0c215646b09"

    LogsLogStream368:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0d7e6968b36b4132a5ba5d858909ce82"

    LogsLogStream369:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0d94bc3db0ac4abcbeba3c540562e15d"

    LogsLogStream370:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0dc94fbc0df74f9ea53e5a9f2b699cff"

    LogsLogStream371:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0e0a368a37a14ef0a907c8f2a855af49"

    LogsLogStream372:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0e3cfe4af8f74a4cac2f28414a2e8d4b"

    LogsLogStream373:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "log-pipeline"
            LogStreamName: !Sub "${ECSService7.Name}/${ECSService7.Name}/0e931364b3194a4da69162221a3b7953"

    LogsLogStream374:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs"
            LogStreamName: !Sub "${EC2PrefixList.OwnerId}_CloudTrail_${AWS::Region}"

    LogsLogStream375:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs"
            LogStreamName: !Sub "${EC2PrefixList.OwnerId}_CloudTrail_${AWS::Region}_2"

    LogsLogStream376:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs"
            LogStreamName: !Sub "${EC2PrefixList.OwnerId}_CloudTrail_${AWS::Region}_3"

    LogsLogStream377:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs"
            LogStreamName: !Sub "${EC2PrefixList.OwnerId}_CloudTrail_${AWS::Region}_4"

    CloudWatchAnomalyDetector:
        Type: "AWS::CloudWatch::AnomalyDetector"
        Properties:
            MetricName: "CPUUtilization"
            Namespace: "AWS/ECS"
            Stat: "Average"
            Configuration: {}
            Dimensions:
              -
                Name: "ServiceName"
                Value: !GetAtt ECSService8.Name
              -
                Name: "ClusterName"
                Value: !Ref ECSCluster4

    LogsResourcePolicy:
        Type: "AWS::Logs::ResourcePolicy"
        Properties:
            PolicyName: "AWSServiceRoleForRoute53"
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"Route53LogsToCloudWatchLogs\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"route53.amazonaws.com\"},\"Action\":[\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":\"arn:aws:logs:${AWS::Region}:${EC2PrefixList.OwnerId}:log-group:*\"}]}"

    CloudTrailTrail:
        Type: "AWS::CloudTrail::Trail"
        Properties:
            TrailName: !Sub "mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}"
            S3BucketName: !Sub "mxr-governance-cloudtrail-logging-bucket-${EC2PrefixList.OwnerId}"
            IncludeGlobalServiceEvents: true
            IsMultiRegionTrail: true
            EnableLogFileValidation: true
            CloudWatchLogsLogGroupArn: !Sub "arn:aws:logs:${AWS::Region}:${EC2PrefixList.OwnerId}:log-group:mxr-governance-global-cloudtrail-${EC2PrefixList.OwnerId}-logs:*"
            CloudWatchLogsRoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole6}"
            KMSKeyId: !Sub "arn:aws:kms:${AWS::Region}:370438565036:key/9f59275e-a883-4dde-a042-c9e3427385a6"
            IsLogging: true
            Tags:
              -
                Key: "Project"
                Value: "cloudtrail"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "cloudtrail-provisioner"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    ConfigConfigurationRecorder:
        Type: "AWS::Config::ConfigurationRecorder"
        Properties:
            Name: !Ref ECSCluster2
            RecordingGroup:
                AllSupported: true
                IncludeGlobalResourceTypes: false
            RoleARN: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig"

    ConfigDeliveryChannel:
        Type: "AWS::Config::DeliveryChannel"
        Properties:
            Name: !Ref ECSCluster2
            S3BucketName: !Ref S3Bucket4

    ServiceCatalogPortfolio:
        Type: "AWS::ServiceCatalog::Portfolio"
        Properties:
            ProviderName: "aws-governance"
            Description: "Maxar Governance Portfolio for self-service products"
            DisplayName: "mxr-governance-self-service-portfolio"

    ServiceCatalogPortfolioPrincipalAssociation:
        Type: "AWS::ServiceCatalog::PortfolioPrincipalAssociation"
        Properties:
            PrincipalARN: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMGroup}"
            PrincipalType: "IAM"
            PortfolioId: "port-kpxvbitx4in4e"

    ServiceCatalogPortfolioPrincipalAssociation2:
        Type: "AWS::ServiceCatalog::PortfolioPrincipalAssociation"
        Properties:
            PrincipalARN: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole19}"
            PrincipalType: "IAM"
            PortfolioId: "port-kpxvbitx4in4e"

    ServiceCatalogPortfolioPrincipalAssociation3:
        Type: "AWS::ServiceCatalog::PortfolioPrincipalAssociation"
        Properties:
            PrincipalARN: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/servicecatalog-puppet/${IAMRole27}"
            PrincipalType: "IAM"
            PortfolioId: "port-kpxvbitx4in4e"

    ServiceCatalogPortfolioProductAssociation:
        Type: "AWS::ServiceCatalog::PortfolioProductAssociation"
        Properties:
            PortfolioId: "port-kpxvbitx4in4e"
            ProductId: "pp-gzsufs5bk7w5s"
            "":
                portfolio:
                    Id: "port-kpxvbitx4in4e"
                    ARN: !Sub "arn:aws:catalog:${AWS::Region}:${EC2PrefixList.OwnerId}:portfolio/port-kpxvbitx4in4e"
                    DisplayName: "mxr-governance-self-service-portfolio"
                    Description: "Maxar Governance Portfolio for self-service products"
                    CreatedTime: "2021-11-02T21:47:52.941Z"
                    ProviderName: "aws-governance"
                product:
                    Name: "mxr-governance-aws-ssm-install-automation-09261229"
                    Arn: !Sub "arn:aws:servicecatalog:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/mxr-governance-aws-ssm-install-automation-09261229/pp-gzsufs5bk7w5s"
                    Type: "CFN_STACK"
                    Id: "pp-gzsufs5bk7w5s"
                    Status: "AVAILABLE"
                    CreatedTime: "2022-09-26T12:57:32.375Z"
                    IdempotencyToken: "662b5bcb-6eb5-411a-a94c-34a416500f0e"
                    LastRecordId: "rec-b5bnvvkzuouyg"
                    LastProvisioningRecordId: "rec-b5bnvvkzuouyg"
                    LastSuccessfulProvisioningRecordId: "rec-b5bnvvkzuouyg"
                    Tags:
                      -
                        Key: "aws:servicecatalog:productArn"
                        Value: !Sub "arn:aws:catalog:${AWS::Region}:754775651946:product/prod-mxhsbkqcdg5n4"
                      -
                        Key: "aws:servicecatalog:provisioningPrincipalArn"
                        Value: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMGroup}/Jim.Taysom@maxar.com"
                      -
                        Key: "aws:servicecatalog:provisioningArtifactIdentifier"
                        Value: "pa-qnk2cp7lv2v4q"
                      -
                        Key: "aws:servicecatalog:portfolioArn"
                        Value: !Sub "arn:aws:catalog:${AWS::Region}:${EC2PrefixList.OwnerId}:portfolio/port-kpxvbitx4in4e"
                      -
                        Key: "aws:servicecatalog:provisionedProductArn"
                        Value: !Sub "arn:aws:servicecatalog:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/mxr-governance-aws-ssm-install-automation-09261229/pp-gzsufs5bk7w5s"
                    PhysicalId: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-gzsufs5bk7w5s/c961c840-3d9a-11ed-bfdf-0ae594feb8e1"
                    ProductId: "prod-mxhsbkqcdg5n4"
                    ProductName: "mxr-governance-aws-ssm-install-automation"
                    ProvisioningArtifactId: "pa-qnk2cp7lv2v4q"
                    ProvisioningArtifactName: "v1"
                    UserArn: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMGroup}"
                    UserArnSession: !Sub "arn:aws:sts::${EC2PrefixList.OwnerId}:assumed-role/${IAMGroup}/Jim.Taysom@maxar.com"

    ServiceCatalogAcceptedPortfolioShare:
        Type: "AWS::ServiceCatalog::AcceptedPortfolioShare"
        Properties:
            PortfolioId: "port-xfju63mq5gogu"

    ServiceCatalogAcceptedPortfolioShare2:
        Type: "AWS::ServiceCatalog::AcceptedPortfolioShare"
        Properties:
            PortfolioId: "port-zup55yytbigz2"

    ServiceCatalogAcceptedPortfolioShare3:
        Type: "AWS::ServiceCatalog::AcceptedPortfolioShare"
        Properties:
            PortfolioId: "port-4ft6uvtpd5qva"

    ServiceCatalogCloudFormationProvisionedProduct:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-aws-ssm-install-automation-09261229"
            ProductId: "prod-mxhsbkqcdg5n4"
            ProvisioningArtifactId: "pa-qnk2cp7lv2v4q"
            ProductName: "mxr-governance-aws-ssm-install-automation-09261229"

    ServiceCatalogCloudFormationProvisionedProduct2:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-wiz-aws-scanning-role"
            ProductId: "prod-3ttlyjdabniik"
            ProvisioningArtifactId: "pa-rowido6ut35vm"
            ProductName: "mxr-governance-wiz-aws-scanning-role"

    ServiceCatalogCloudFormationProvisionedProduct3:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-roles"
            ProductId: "prod-ov3pycvnhwa7a"
            ProvisioningArtifactId: "pa-k7j2u336qoxda"
            ProductName: "mxr-governance-roles"

    ServiceCatalogCloudFormationProvisionedProduct4:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-zesty-aws-scanning-role-spoke"
            ProductId: "prod-6iqia2bu64o36"
            ProvisioningArtifactId: "pa-evqh45fnri43c"
            ProductName: "mxr-governance-zesty-aws-scanning-role-spoke"

    ServiceCatalogCloudFormationProvisionedProduct5:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-okta-roles"
            ProductId: "prod-phzkhozxbk7gs"
            ProvisioningArtifactId: "pa-ybspqtt76ggqw"
            ProductName: "mxr-governance-okta-roles"

    ServiceCatalogCloudFormationProvisionedProduct6:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-mfa-policy"
            ProductId: "prod-o2auqcipxftro"
            ProvisioningArtifactId: "pa-y7nzyqupbaimk"
            ProductName: "mxr-governance-mfa-policy"

    ServiceCatalogCloudFormationProvisionedProduct7:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: !Sub "delete-${ECSCluster2}-networking"
            ProductId: "prod-2fcaj3djwpme6"
            ProvisioningArtifactId: "pa-g7i6qz2ehnglw"
            ProductName: !Sub "delete-${ECSCluster2}-networking"

    ServiceCatalogCloudFormationProvisionedProduct8:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-cloudtrail-log-security-rules"
            ProductId: "prod-hrqvhzrh5ds2w"
            ProvisioningArtifactId: "pa-4xzukx2qotk2w"
            ProductName: "mxr-governance-cloudtrail-log-security-rules"

    ServiceCatalogCloudFormationProvisionedProduct9:
        Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
        Properties:
            ProvisionedProductName: "mxr-governance-access-analyzer-spoke"
            ProductId: "prod-3dxmofkfwlw32"
            ProvisioningArtifactId: "pa-3oaojaasycrq2"
            ProductName: "mxr-governance-access-analyzer-spoke"

    SSMDocument:
        Type: "AWS::SSM::Document"
        Properties:
            Name: "AWSQuickSetup-CreateAndAttachIAMToInstance-yoogl"
            Content: !Sub |
                {
                  "schemaVersion" : "0.3",
                  "description" : "Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies",
                  "assumeRole" : "{{AutomationAssumeRole}}",
                  "parameters" : {
                    "AutomationAssumeRole" : {
                      "type" : "String"
                    },
                    "InstanceId" : {
                      "type" : "String"
                    },
                    "IsPolicyAttachAllowed" : {
                      "type" : "String"
                    }
                  },
                  "mainSteps" : [ {
                    "outputs" : [ {
                      "Type" : "String",
                      "Name" : "existingInstanceProfileRoleName",
                      "Selector" : "$.Payload.RoleName"
                    } ],
                    "inputs" : {
                      "Script" : "import boto3\n\ndef getInstanceProfileName(events, context):\n    ec2_client = boto3.client(\"ec2\")\n    response = ec2_client.describe_instances(InstanceIds=[events[\"InstanceId\"]])\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('instance-profile/')[1]}\n    return {'RoleName': 'NoRoleFound'}",
                      "Runtime" : "python3.6",
                      "InputPayload" : {
                        "InstanceId" : "{{InstanceId}}"
                      },
                      "Handler" : "getInstanceProfileName"
                    },
                    "name" : "getExistingRoleName",
                    "action" : "aws:executeScript",
                    "nextStep" : "branchIfProfileExists"
                  }, {
                    "inputs" : {
                      "Choices" : [ {
                        "StringEquals" : "NoRoleFound",
                        "Variable" : "{{getExistingRoleName.existingInstanceProfileRoleName}}",
                        "NextStep" : "createRoleIfNotExists"
                      } ],
                      "Default" : "checkIfPolicyAttachAllowed"
                    },
                    "name" : "branchIfProfileExists",
                    "action" : "aws:branch"
                  }, {
                    "inputs" : {
                      "Choices" : [ {
                        "StringEquals" : "true",
                        "Variable" : "{{IsPolicyAttachAllowed}}",
                        "NextStep" : "getRoleFromInstanceProfile"
                      } ],
                      "Default" : "createRoleIfNotExists"
                    },
                    "name" : "checkIfPolicyAttachAllowed",
                    "action" : "aws:branch"
                  }, {
                    "outputs" : [ {
                      "Type" : "String",
                      "Name" : "existingRoleName",
                      "Selector" : "$.InstanceProfile.Roles[0].RoleName"
                    } ],
                    "inputs" : {
                      "InstanceProfileName" : "{{getExistingRoleName.existingInstanceProfileRoleName}}",
                      "Service" : "iam",
                      "Api" : "GetInstanceProfile"
                    },
                    "name" : "getRoleFromInstanceProfile",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "attachAmazonSSMManagedInstanceCoreToExistingRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "{{getRoleFromInstanceProfile.existingRoleName}}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMManagedInstanceCoreToExistingRole",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "attachAmazonSSMPatchAssociationToExistingRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "{{getRoleFromInstanceProfile.existingRoleName}}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMPatchAssociationToExistingRole",
                    "action" : "aws:executeAwsApi",
                    "isEnd" : true
                  }, {
                    "inputs" : {
                      "Path" : "/",
                      "RoleName" : "${IAMRole2}",
                      "Description" : "EC2 role for SSM for Quick-Setup",
                      "AssumeRolePolicyDocument" : "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                      "Service" : "iam",
                      "Api" : "CreateRole"
                    },
                    "name" : "createRoleIfNotExists",
                    "action" : "aws:executeAwsApi",
                    "description" : "Create ${IAMRole2} Role For SSM Quick Setup",
                    "onFailure" : "Continue",
                    "nextStep" : "assertRoleForInstanceProfileExists"
                  }, {
                    "inputs" : {
                      "PropertySelector" : "$.Role.RoleName",
                      "RoleName" : "${IAMRole2}",
                      "DesiredValues" : [ "${IAMRole2}" ],
                      "Service" : "iam",
                      "Api" : "GetRole"
                    },
                    "name" : "assertRoleForInstanceProfileExists",
                    "action" : "aws:assertAwsResourceProperty",
                    "nextStep" : "attachAmazonSSMManagedInstanceCoreToRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "${IAMRole2}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMManagedInstanceCoreToRole",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "attachAmazonSSMPatchAssociationToRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "${IAMRole2}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMPatchAssociationToRole",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "createInstanceProfileIfNotExists"
                  }, {
                    "inputs" : {
                      "InstanceProfileName" : "${IAMRole2}",
                      "Service" : "iam",
                      "Api" : "CreateInstanceProfile"
                    },
                    "name" : "createInstanceProfileIfNotExists",
                    "action" : "aws:executeAwsApi",
                    "onFailure" : "Continue",
                    "nextStep" : "addRoleToInstanceProfile"
                  }, {
                    "inputs" : {
                      "RoleName" : "${IAMRole2}",
                      "InstanceProfileName" : "${IAMRole2}",
                      "Service" : "iam",
                      "Api" : "AddRoleToInstanceProfile"
                    },
                    "name" : "addRoleToInstanceProfile",
                    "action" : "aws:executeAwsApi",
                    "onFailure" : "Continue",
                    "nextStep" : "executeAttachIAMToInstance"
                  }, {
                    "maxAttempts" : 10,
                    "inputs" : {
                      "RuntimeParameters" : {
                        "AutomationAssumeRole" : "{{ AutomationAssumeRole }}",
                        "RoleName" : "${IAMRole2}",
                        "InstanceId" : "{{ InstanceId }}",
                        "ForceReplace" : false
                      },
                      "DocumentName" : "AWS-AttachIAMToInstance"
                    },
                    "name" : "executeAttachIAMToInstance",
                    "action" : "aws:executeAutomation",
                    "timeoutSeconds" : 60,
                    "isEnd" : true
                  } ]
                }
            DocumentType: "Automation"
            Tags:
              -
                Key: "QuickSetupID"
                Value: "yoogl"
              -
                Key: "QuickSetupType"
                Value: "Host Management"
              -
                Key: "QuickSetupVersion"
                Value: "2.0"

    SSMDocument2:
        Type: "AWS::SSM::Document"
        Properties:
            Name: "AWSQuickSetup-UpdateExistingInstanceProfile-yoogl"
            Content: |
                {
                  "schemaVersion" : "0.3",
                  "description" : "Composite document for Quick Setup Managing Instances association. This document updates the user provided instance profile with roles and policies",
                  "assumeRole" : "{{AutomationAssumeRole}}",
                  "parameters" : {
                    "AutomationAssumeRole" : {
                      "type" : "String"
                    },
                    "InstanceId" : {
                      "type" : "String"
                    },
                    "InstanceProfile" : {
                      "type" : "String"
                    }
                  },
                  "mainSteps" : [ {
                    "outputs" : [ {
                      "Type" : "String",
                      "Name" : "existingRoleName",
                      "Selector" : "$.InstanceProfile.Roles[0].RoleName"
                    } ],
                    "inputs" : {
                      "InstanceProfileName" : "{{InstanceProfile}}",
                      "Service" : "iam",
                      "Api" : "GetInstanceProfile"
                    },
                    "name" : "getRoleFromInstanceProfile",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "attachAmazonSSMManagedInstanceCoreToExistingRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "{{getRoleFromInstanceProfile.existingRoleName}}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMManagedInstanceCoreToExistingRole",
                    "action" : "aws:executeAwsApi",
                    "nextStep" : "attachAmazonSSMPatchAssociationToExistingRole"
                  }, {
                    "inputs" : {
                      "RoleName" : "{{getRoleFromInstanceProfile.existingRoleName}}",
                      "PolicyArn" : "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
                      "Service" : "iam",
                      "Api" : "AttachRolePolicy"
                    },
                    "name" : "attachAmazonSSMPatchAssociationToExistingRole",
                    "action" : "aws:executeAwsApi",
                    "isEnd" : true
                  } ]
                }
            DocumentType: "Automation"
            Tags:
              -
                Key: "QuickSetupID"
                Value: "yoogl"
              -
                Key: "QuickSetupType"
                Value: "Host Management"
              -
                Key: "QuickSetupVersion"
                Value: "2.0"

    SSMDocument3:
        Type: "AWS::SSM::Document"
        Properties:
            Name: "SSM-SessionManagerRunShell"
            Content: !Sub "{\"schemaVersion\":\"1.0\",\"description\":\"Document to hold regional settings for Session Manager\",\"sessionType\":\"Standard_Stream\",\"inputs\":{\"s3BucketName\":\"\",\"s3KeyPrefix\":\"\",\"s3EncryptionEnabled\":true,\"cloudWatchLogGroupName\":\"\",\"cloudWatchEncryptionEnabled\":true,\"idleSessionTimeout\":\"60\",\"maxSessionDuration\":\"180\",\"cloudWatchStre${IAMPolicy12}ngEnabled\":true,\"kmsKeyId\":\"\",\"runAsEnabled\":false,\"runAsDefaultUser\":\"\",\"shellProfile\":{\"windows\":\"\",\"linux\":\"\"}}}"
            DocumentType: "Session"

    SSMParameter:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: "service-catalog-puppet-spoke-version"
            Type: "SecureString"
            Value: "AQICAHiLfw1m99SW3BLwreBcsfIWxWht+q+P1Z8cU9j388N42QHR/ymKrtTIURUjW0ENGpNkAAAAZTBjBgkqhkiG9w0BBwagVjBUAgEAME8GCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMLrG7YKSdv+8sdCQTAgEQgCKMj8pIzWY91irvBULGhr5vUiIZO48bapXvdLD5ySi1L6+s"
            DataType: "text"
            Tier: "Standard"

    SSMAssociation:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-EnableExplorer"
            DocumentVersion: "$DEFAULT"
            Parameters:
                AutomationAssumeRole:
                  - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole5}"
            AssociationName: "AWS-QuickSetup-SSMHostMgmt-EnableExplorer-yoogl"
            Targets:
              -
                Key: "aws:NoOpAutomationTag"
                Values:
                  - "AWS-NoOpAutomationTarget-Value"

    SSMAssociation2:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-ConfigureAWSPackage"
            DocumentVersion: "$DEFAULT"
            Parameters:
                action:
                  - "Install"
                additionalArguments:
                  - "{}"
                installationType:
                  - "Uninstall and reinstall"
                name:
                  - !Sub "arn:aws:ssm:${AWS::Region}:117106523360:document/MaxarSecurityAgentCrowdStrike"
            ScheduleExpression: "rate(24 hours)"
            AssociationName: !Sub "mxr-governance-${AWS::Region}-crowdstrike-installation"
            Targets:
              -
                Key: "tag:InstallCrowdstrikeAgent"
                Values:
                  - "true"

    SSMAssociation3:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWSQuickSetup-CreateAndAttachIAMToInstance-yoogl"
            DocumentVersion: "$DEFAULT"
            Parameters:
                AutomationAssumeRole:
                  - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole5}"
                IsPolicyAttachAllowed:
                  - "false"
            ScheduleExpression: "rate(30 days)"
            AssociationName: "AWS-QuickSetup-SSMHostMgmt-AttachIAMToInstance-yoogl"
            Targets:
              -
                Key: "InstanceIds"
                Values:
                  - "*"

    SSMAssociation4:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-UpdateSSMAgent"
            DocumentVersion: "$DEFAULT"
            ScheduleExpression: "rate(14 days)"
            AssociationName: "AWS-QuickSetup-SSMHostMgmt-UpdateSSMAgent-yoogl"
            Targets:
              -
                Key: "InstanceIds"
                Values:
                  - "*"

    SSMAssociation5:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-RunPatchBaselineAssociation"
            DocumentVersion: "$DEFAULT"
            Parameters:
                AssociationId:
                  - "aef916c9-bb38-426b-b1b4-340bc834cf30"
                Operation:
                  - "Scan"
            ScheduleExpression: "rate(1 day)"
            AssociationName: "AWS-QuickSetup-SSMHostMgmt-ScanForPatches-yoogl"
            Targets:
              -
                Key: "InstanceIds"
                Values:
                  - "*"

    SSMAssociation6:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-GatherSoftwareInventory"
            DocumentVersion: "$DEFAULT"
            Parameters:
                applications:
                  - "Enabled"
                awsComponents:
                  - "Enabled"
                customInventory:
                  - "Enabled"
                instanceDetailedInformation:
                  - "Enabled"
                networkConfig:
                  - "Enabled"
                services:
                  - "Enabled"
                windowsRoles:
                  - "Enabled"
                windowsUpdates:
                  - "Enabled"
            ScheduleExpression: "rate(30 minutes)"
            AssociationName: "AWS-QuickSetup-SSMHostMgmt-CollectInventory-yoogl"
            Targets:
              -
                Key: "InstanceIds"
                Values:
                  - "*"

    GlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Name: "rpm-unzip"
            Role: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole20}"
            ExecutionProperty:
                MaxConcurrentRuns: 1
            Command:
                Name: "glueetl"
                ScriptLocation: !Sub "s3://${S3Bucket}/admin/rpm-unzip"
                PythonVersion: "3"
            DefaultArguments:
                --job-bookmark-option: "job-bookmark-disable"
                --job-language: "python"
                --TempDir: !Sub "s3://${S3Bucket7}/admin"
                --enable-continuous-cloudwatch-log: "true"
            MaxRetries: 0
            AllocatedCapacity: 10
            Timeout: 2880
            GlueVersion: "2.0"
            MaxCapacity: 10
            NumberOfWorkers: 10
            WorkerType: "G.1X"

    IAMUser:
        Type: "AWS::IAM::User"
        Properties:
            Path: "/"
            UserName: "CD_deployer"
            Groups:
              - !Ref IAMGroup3
            Tags:
              -
                Key: "AKIA25HQAJGKDSI5NJCV"
                Value: "github-actions"
              -
                Key: "AKIA25HQAJGKNTQZHQH7"
                Value: "github-actions"
              -
                Key: "AKIA25HQAJGKH2FKLF7N"
                Value: "github-actions"
              -
                Key: "AKIA25HQAJGKODTGMIQ4"
                Value: "git-hub-actions"
              -
                Key: "ServiceUser"
                Value: "true"
              -
                Key: "POC"
                Value: "Mary Shultz"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"

    IAMGroup:
        Type: "AWS::IAM::Group"
        Properties:
            Path: "/"
            GroupName: !Ref IAMRole4
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AdministratorAccess"

    IAMGroup2:
        Type: "AWS::IAM::Group"
        Properties:
            Path: "/"
            GroupName: "MFAGroup"
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/SC-${EC2PrefixList.OwnerId}-pp-tzrqxdqk2inqu-MFAPolicy-1XYD9FD6ZHHM6"

    IAMGroup3:
        Type: "AWS::IAM::Group"
        Properties:
            Path: "/"
            GroupName: "Deployer"
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/github_action_policy"
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/Github_ansible_policy"
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/ECR_get_token"
              - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
              - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
              - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
              - "arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess"
              - !Sub "arn:aws:iam::aws:policy/AmazonS3${IAMRole25}Access"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "AWS-QuickSetup-StackSet-Local-ExecutionRole"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole3}\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "AmazonSSMRoleForInstancesQuickSetup"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
              - "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation"
            Description: "EC2 role for SSM for Quick-Setup"

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "AWS-QuickSetup-StackSet-Local-AdministrationRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Ref IAMGroup
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Federated\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:saml-provider/Okta\"},\"Action\":\"sts:AssumeRoleWithSAML\",\"Condition\":{\"StringEquals\":{\"SAML:aud\":\"https://signin.aws.amazon.com/saml\"}}}]}"
            MaxSessionDuration: 43200
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AdministratorAccess"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-okta-roles"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Component"
                Value: !Ref IAMGroup
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "AWS-QuickSetup-HostMgmtRole-${AWS::Region}-yoogl"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ssm.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "QuickSetupVersion"
                Value: "2.0"
              -
                Key: "QuickSetupType"
                Value: "Host Management"
              -
                Key: "QuickSetupID"
                Value: "yoogl"

    IAMRole6:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "CloudtrailLogsRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudtrail.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "Project"
                Value: "cloudtrail"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "cloudtrail-provisioner"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole7:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "DeleteDefaultVPCLambdaExecution"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: !Sub "delete-${ECSCluster2}-networking"
              -
                Key: "Project"
                Value: "account-vending-machine"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: !Sub "delete-${ECSCluster2}-networking"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole8:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-ecs-task-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-task-get-s3-policy"
            Description: "Allows ECS tasks to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Jim Taysom"
              -
                Key: "Project"
                Value: "Fallout"

    IAMRole9:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ec2-cloudwatch"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/custom-logs"
            Description: "Allows EC2 instances to call AWS services on your behalf."
            Tags:
              -
                Key: "Name"
                Value: "ec2-cloudwatch"

    IAMRole10:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ECS-task-execution"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/Fallout-Secret-Policy"
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
              - "arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess"
              - !Sub "arn:aws:iam::aws:policy/AmazonS3${IAMRole25}Access"
              - "arn:aws:iam::aws:policy/job-function/NetworkAdministrator"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows ECS tasks to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Mary Shultz"

    IAMRole11:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ecsAutoscaleRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"application-autoscaling.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

    IAMRole12:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ECS-Task-Execution-Role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/Fallout-Secret-Policy"
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
              - !Sub "arn:aws:iam::aws:policy/AmazonS3${IAMRole25}Access"
            Description: "Allows ECS tasks to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Jim Taysom"
              -
                Key: "Project"
                Value: "Fallout"

    IAMRole13:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/servicecatalog-puppet/"
            RoleName: "EventBridgeFromSpoke"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Framework"

    IAMRole14:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ec2-container-instance-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
              - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
              - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Mary Shultz"

    IAMRole15:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ecsExternalInstanceRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ssm.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    IAMRole16:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "${S3Bucket17}-ecs-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/Fallout-Secret-Policy"
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
              - "arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows ECS tasks to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Mary Shultz"

    IAMRole17:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "geo_s3_access"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."

    IAMRole18:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "github_action_role"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/CD_deployer\"},\"Action\":[\"sts:AssumeRole\",\"sts:TagSession\"]}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/Github_ansible_policy"
            Description: ""

    IAMRole19:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "PowerUsers"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Federated\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:saml-provider/Okta\"},\"Action\":\"sts:AssumeRoleWithSAML\",\"Condition\":{\"StringEquals\":{\"SAML:aud\":\"https://signin.aws.amazon.com/saml\"}}}]}"
            MaxSessionDuration: 43200
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::aws:policy/IAM${IAMRole25}Access"
              - "arn:aws:iam::aws:policy/PowerUserAccess"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-okta-roles"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "governance-roles"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole20:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "GlueS3"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"glue.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            Description: "Allows Glue to call AWS services on your behalf. "
            Tags:
              -
                Key: "POC"
                Value: "Mary Shultz"
              -
                Key: "Project"
                Value: "Fallout"

    IAMRole21:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/servicecatalog-puppet/"
            RoleName: "PuppetDeployInSpokeRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            PermissionsBoundary: "arn:aws:iam::aws:policy/AdministratorAccess"
            Description: ""
            Tags:
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Framework"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Component"
                Value: "PuppetDeployInSpokeRole"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole22:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "power-user-role"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:root\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"Bool\":{\"aws:MultiFactorAuthPresent\":\"true\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/PowerUserAccess"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-mfa-policy"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"

    IAMRole23:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "rds-monitoring-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"monitoring.rds.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"

    IAMRole24:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "OrganizationAccountAccessRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::398274688464:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Tags:
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Component"
                Value: "OrganizationAccountAccessRole"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole25:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ReadOnly"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Federated\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:saml-provider/Okta\"},\"Action\":\"sts:AssumeRoleWithSAML\",\"Condition\":{\"StringEquals\":{\"SAML:aud\":\"https://signin.aws.amazon.com/saml\"}}}]}"
            MaxSessionDuration: 43200
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/ReadOnlyAccess"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-okta-roles"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "governance-roles"
              -
                Key: "version"
                Value: "v3"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole26:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "SecurityLogForwarderRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-cloudtrail-log-security-rules"
              -
                Key: "Project"
                Value: "cloudtrail"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "ServiceUser"
                Value: "true"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "cloudtrail-log-security-rules"
              -
                Key: "version"
                Value: "v1"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Name"
                Value: "SecurityLogForwarderRole"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole27:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/servicecatalog-puppet/"
            RoleName: "PuppetRole"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::754775651946:root\"},\"Action\":\"sts:AssumeRole\"},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            PermissionsBoundary: "arn:aws:iam::aws:policy/AdministratorAccess"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AdministratorAccess"
              - "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess"
            Description: ""
            Tags:
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Framework"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Component"
                Value: "PuppetRole"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole28:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "SSM-EC2-Role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/SSM-EC2-Policy"
            Description: "Allows EC2 instances to use SSM to create sessions between the user and an EC2 instance"
            Tags:
              -
                Key: "Name"
                Value: "SSM-EC2-Role"
              -
                Key: "POC"
                Value: "Jim"

    IAMRole29:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "WA-Optimization-Data-Multi-Account-Role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::437861174546:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AWSLambdaExecute"
            Description: ""
            Tags:
              -
                Key: "Project"
                Value: "OptimizationCollection"
              -
                Key: "POC"
                Value: "joe.mcmahon@maxar.com"

    IAMRole30:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "WizScanRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::640574606290:root\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":\"25f4bb17-291e-43b7-95ca-8ae00ace506a\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-wiz-aws-scanning-role"
              -
                Key: "Project"
                Value: "wiz"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "wiz-aws-scanning-role"
              -
                Key: "version"
                Value: "v1"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Name"
                Value: "WizScanRole"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole31:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "terraform-20211118221516365900000001"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"vpcFlowLogsAssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"vpc-flow-logs.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600

    IAMRole32:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "SSMInstanceProfile"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/SSM-EC2-Policy"
              - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
            Description: "Allows EC2 instances to be accessed with SSM"
            Tags:
              -
                Key: "POC"
                Value: "Jim"
              -
                Key: "Name"
                Value: "SSMInstanceProfile"

    IAMRole33:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-access-analyzer-spoke"
              -
                Key: "Project"
                Value: "access-analyzer"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "access-analyzer-spoke"
              -
                Key: "version"
                Value: "v2"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Name"
                Value: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventRole"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole34:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "stacksets-exec-90844a21720b8f50a1b6a266acd00849"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Id\":\"stacksets-exec-90844a21720b8f50a1b6a266acd00849-assume-role-policy\",\"Statement\":[{\"Sid\":\"1\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::398274688464:role/aws-service-role/stacksets.cloudformation.amazonaws.com/AWSServiceRoleForCloudFormationStackSetsOrgAdmin\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AdministratorAccess"
            Description: "Role created by AWSCloudFormation StackSets"
            Tags:
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Component"
                Value: "stacksets"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole35:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "WizRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::197171649850:root\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":\"25f4bb17-291e-43b7-95ca-8ae00ace506a\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
              - "arn:aws:iam::aws:policy/SecurityAudit"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-wiz-aws-scanning-role"
              -
                Key: "Project"
                Value: "wiz"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "wiz-aws-scanning-role"
              -
                Key: "version"
                Value: "v1"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Name"
                Value: "WizRole"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole36:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "watchServiceReportLogs"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/deployLambdaToVpc"
              - "arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess"
              - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
            Description: "Allows Lambda functions to call AWS services on your behalf."
            Tags:
              -
                Key: "POC"
                Value: "Mary Shultz"

    IAMRole37:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "ZestyRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::672188301118:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:policy/governance/Zesty${IAMRole25}Policy"
            Description: "IAM Role for Zesty Application Access"
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-zesty-aws-scanning-role-spoke"
              -
                Key: "Project"
                Value: "zesty"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "zesty-aws-scanning-role"
              -
                Key: "version"
                Value: "v1"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Name"
                Value: "ZestyRole"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole38:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: !Sub "${IAMRole39}-${IAMRole25}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::117106523360:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AWSSupportAccess"
              - "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
              - "arn:aws:iam::aws:policy/SecurityAudit"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-roles"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "governance-roles"
              -
                Key: "version"
                Value: "v4"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMRole39:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/governance/"
            RoleName: "xaccount-Governance"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::117106523360:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/AWSSupportAccess"
              - "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess"
              - "arn:aws:iam::aws:policy/SecurityAudit"
            Description: ""
            Tags:
              -
                Key: "launch_name"
                Value: "mxr-governance-roles"
              -
                Key: "Project"
                Value: "governance"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Component"
                Value: "governance-roles"
              -
                Key: "version"
                Value: "v4"
              -
                Key: "ServiceCatalogPuppet:Actor"
                Value: "Generated"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"

    IAMServiceLinkedRole:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "ssm.amazonaws.com"
            Description: "Provides access to AWS Resources managed or used by Amazon SSM."

    IAMServiceLinkedRole2:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "autoscaling.amazonaws.com"
            Description: "Default Service-Linked Role enables access to AWS Services and Resources used or managed by Auto Scaling"

    IAMServiceLinkedRole3:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "license-manager.amazonaws.com"

    IAMServiceLinkedRole4:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "ecs.application-autoscaling.amazonaws.com"

    IAMServiceLinkedRole5:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "member.org.stacksets.cloudformation.amazonaws.com"
            Description: "Service linked role for CloudFormation StackSets (Organization Member)"

    IAMServiceLinkedRole6:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "config.amazonaws.com"

    IAMServiceLinkedRole7:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "access-analyzer.amazonaws.com"

    IAMServiceLinkedRole8:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "ecs.amazonaws.com"
            Description: "Role to enable Amazon ECS to manage your cluster."

    IAMServiceLinkedRole9:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "config-multiaccountsetup.amazonaws.com"

    IAMServiceLinkedRole10:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "elasticloadbalancing.amazonaws.com"
            Description: "Allows ELB to call AWS services on your behalf."

    IAMServiceLinkedRole11:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "fms.amazonaws.com"

    IAMServiceLinkedRole12:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "globalaccelerator.amazonaws.com"
            Description: "Allows Global Accelerator to call AWS services on customer's behalf"

    IAMServiceLinkedRole13:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "license-management.marketplace.amazonaws.com"

    IAMServiceLinkedRole14:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "organizations.amazonaws.com"
            Description: !Sub "Service-linked role used by AWS ${IAMPolicy6} to enable integration of other AWS services with ${IAMPolicy6}."

    IAMServiceLinkedRole15:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "sso.amazonaws.com"
            Description: "Service-linked role used by AWS SSO to manage AWS resources, including IAM roles, policies and SAML IdP on your behalf."

    IAMServiceLinkedRole16:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "rds.amazonaws.com"
            Description: "Allows Amazon RDS to manage AWS resources on your behalf"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "custom-logs"
            Path: "/"
            PolicyDocument: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams"
                    ],
                      "Resource": [
                        "arn:aws:logs:*:*:*"
                    ]
                  }
                 ]
                }

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "Github_ansible_policy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": "ec2:CreateTags",
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "ec2:CreateAction": "RunInstances"
                                }
                            }
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": "iam:PassRole",
                            "Resource": "*",
                            "Condition": {
                                "StringLike": {
                                    "iam:PassedToService": "ecs-tasks.amazonaws.com"
                                }
                            }
                        },
                        {
                            
                            "Sid": "VisualEditor5",
                            "Effect": "Allow",
                            "Action": "iam:PassRole",
                            "Resource": "arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole14}"
                        },
                        {
                            "Sid": "VisualEditor2",
                            "Effect": "Allow",
                            "Action": "iam:PassRole",
                            "Resource": "arn:aws:iam::*:role/ecsInstanceRole*",
                            "Condition": {
                                "StringLike": {
                                    "iam:PassedToService": [
                                        "ec2.amazonaws.com",
                                        "ec2.amazonaws.com.cn"
                                    ]
                                }
                            }
                        },
                        {
                            "Sid": "VisualEditor3",
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:DeleteSubnet",
                                "ec2:RunScheduledInstances",
                                "events:PutRule",
                                "ec2:RequestSpotFleet",
                                "ec2:ModifySubnetAttribute",
                                "events:ListRuleNamesByTarget",
                                "ec2:StartInstances",
                                "iam:ListAttachedRolePolicies",
                                "ec2:ModifyVpcAttribute",
                                "events:RemoveTargets",
                                "events:ListTargetsByRule",
                                "events:DescribeRule",
                                "ec2:TerminateInstances",
                                "ec2:CreateTags",
                                "ec2:RunInstances",
                                "iam:ListRoles",
                                "ec2:DetachInternetGateway",
                                "ec2:DisassociateRouteTable",
                                "iam:ListInstanceProfiles",
                                "ec2:CreateVolume",
                                "events:DeleteRule",
                                "events:PutTargets",
                                "ec2:Describe*",
                                "ecs:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "VisualEditor4",
                            "Effect": "Allow",
                            "Action": [
                                "ssm:GetParametersByPath",
                                "ssm:GetParameters",
                                "ssm:GetParameter"
                            ],
                            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*"
                        }
                    ]
                }

    IAMManagedPolicy3:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tzrqxdqk2inqu-MFAPolicy-1XYD9FD6ZHHM6"
            Path: "/"
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"iam:ListAccountAliases\",\"iam:ListUsers\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowAllUsersToListAccounts\"},{\"Action\":[\"iam:ChangePassword\",\"iam:CreateAccessKey\",\"iam:CreateLoginProfile\",\"iam:DeleteAccessKey\",\"iam:DeleteLoginProfile\",\"iam:GetLoginProfile\",\"iam:GetUser\",\"iam:ListAccessKeys\",\"iam:UpdateAccessKey\",\"iam:UpdateLoginProfile\",\"iam:ListSigningCertificates\",\"iam:DeleteSigningCertificate\",\"iam:UpdateSigningCertificate\",\"iam:UploadSigningCertificate\",\"iam:ListSSHPublicKeys\",\"iam:GetSSHPublicKey\",\"iam:DeleteSSHPublicKey\",\"iam:UpdateSSHPublicKey\",\"iam:UploadSSHPublicKey\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/${aws:username}\"],\"Effect\":\"Allow\",\"Sid\":\"AllowIndividualUserToSeeAndManageOnlyTheirOwnAccountInformation\"},{\"Action\":[\"iam:ListVirtualMFADevices\",\"iam:ListMFADevices\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:mfa/*\",\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/${aws:username}\"],\"Effect\":\"Allow\",\"Sid\":\"AllowIndividualUserToListTheirMFA\"},{\"Action\":[\"sts:GetSessionToken\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/${aws:username}\"],\"Effect\":\"Allow\",\"Sid\":\"AllowUsersToAssumeRoles\"},{\"Action\":[\"iam:CreateVirtualMFADevice\",\"iam:DeactivateMFADevice\",\"iam:DeleteVirtualMFADevice\",\"iam:EnableMFADevice\",\"iam:ResyncMFADevice\",\"iam:RequestSmsMfaRegistration\",\"iam:FinalizeSmsMfaRegistration\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:mfa/${aws:username}\",\"arn:aws:iam::${EC2PrefixList.OwnerId}:user/${aws:username}\"],\"Effect\":\"Allow\",\"Sid\":\"AllowIndividualUserToManageTheirMFA\"},{\"Condition\":{\"NumericGreaterThanIfExists\":{\"aws:MultiFactorAuthAge\":\"43200\"}},\"Resource\":[\"*\"],\"Effect\":\"Deny\",\"NotAction\":[\"iam:*\"],\"Sid\":\"DoNotAllowAnythingOtherThanAboveUnlessMFAd\"}]}"

    IAMManagedPolicy4:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "github_action_policy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"ecs:UpdateService",
                				"iam:PassRole",
                				"ecr:CompleteLayerUpload",
                				"ecs:DescribeServices",
                				"ecr:UploadLayerPart",
                				"ecr:InitiateLayerUpload",
                				"ecr:BatchCheckLayerAvailability",
                				"ecr:PutImage"
                			],
                			"Resource": [
                				"arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:service/${ECSCluster}/${ECSService.Name}",
                				"arn:aws:ecr:${AWS::Region}:${EC2PrefixList.OwnerId}:repository/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}",
                				"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole12}",
                				"arn:aws:iam::${EC2PrefixList.OwnerId}:role/ECS-Task-Role"
                			]
                		},
                		{
                			"Sid": "VisualEditor1",
                			"Effect": "Allow",
                			"Action": [
                				"ecs:UpdateService",
                				"iam:PassRole",
                				"ecr:CompleteLayerUpload",
                				"ecs:DescribeServices",
                				"ecr:UploadLayerPart",
                				"ecr:InitiateLayerUpload",
                				"ecr:BatchCheckLayerAvailability",
                				"ecr:PutImage"
                			],
                			"Resource": [
                				"arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:service/whiteboard-cluster/Whiteboard-service",
                				"arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:service/factrac-cluster/${ECSService9.Name}",
                				"arn:aws:ecs:${AWS::Region}:${EC2PrefixList.OwnerId}:service/factrac-cluster/${ECSService8.Name}",
                				"arn:aws:ecr:${AWS::Region}:${EC2PrefixList.OwnerId}:repository/whiteboard_api",
                				"arn:aws:ecr:${AWS::Region}:${EC2PrefixList.OwnerId}:repository/factrac_api",
                				"arn:aws:ecr:${AWS::Region}:${EC2PrefixList.OwnerId}:repository/factrac_ui",
                				"arn:aws:iam::${AWS::AccountId}:role/${IAMRole12}",
                				"arn:aws:iam::${AWS::AccountId}:role/ECS-Task-Role",
                				"arn:aws:iam::${AWS::AccountId}:role/${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-ecs-task-role"
                			]
                		},
                		{
                			"Sid": "VisualEditor2",
                			"Effect": "Allow",
                			"Action": [
                				"s3:ListAccessPointsForObjectLambda",
                				"s3:GetAccessPoint",
                				"s3:PutAccountPublicAccessBlock",
                				"s3:ListAccessPoints",
                				"s3:ListJobs",
                				"s3:PutStorageLensConfiguration",
                				"ecr:GetAuthorizationToken",
                				"s3:ListMultiRegionAccessPoints",
                				"s3:ListStorageLensConfigurations",
                				"s3:GetAccountPublicAccessBlock",
                				"s3:ListAllMyBuckets",
                				"s3:PutAccessPointPublicAccessBlock",
                				"ecs:RegisterTaskDefinition",
                				"s3:CreateJob"
                			],
                			"Resource": "*"
                		},
                		{
                			"Sid": "VisualEditor3",
                			"Effect": "Allow",
                			"Action": "s3:*",
                			"Resource": [
                				"arn:aws:s3::${AWS::AccountId}:accesspoint/*",
                				"arn:aws:s3:*:${AWS::AccountId}:accesspoint/*",
                				"arn:aws:s3:us-west-2:${AWS::AccountId}:async-request/mrap/*/*",
                				"arn:aws:s3:*:${AWS::AccountId}:storage-lens/*",
                				"arn:aws:s3:::${S3Bucket16}",
                				"arn:aws:s3:::${S3Bucket11}",
                				"arn:aws:s3:::*/*",
                				"arn:aws:s3-object-lambda:*:${AWS::AccountId}:accesspoint/*",
                				"arn:aws:s3:*:${AWS::AccountId}:job/*"
                			]
                		},
                		{
                			"Effect": "Allow",
                			"Action": [
                				"cloudfront:CreateInvalidation",
                				"cloudfront:GetInvalidation",
                				"cloudfront:ListInvalidations"
                			],
                			"Resource": "*"
                		}
                	]
                }

    IAMManagedPolicy5:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "mxr-ssm-managed-instance-policy"
            Path: "/governance/"
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ssm:DescribeAssociation\",\"ssm:GetDeployablePatchSnapshotForInstance\",\"ssm:GetDocument\",\"ssm:DescribeDocument\",\"ssm:GetManifest\",\"ssm:GetParameter\",\"ssm:GetParameters\",\"ssm:ListAssociations\",\"ssm:ListInstanceAssociations\",\"ssm:PutInventory\",\"ssm:PutComplianceItems\",\"ssm:PutConfigurePackageResult\",\"ssm:UpdateAssociationStatus\",\"ssm:UpdateInstanceAssociationStatus\",\"ssm:UpdateInstanceInformation\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ssmmessages:CreateControlChannel\",\"ssmmessages:CreateDataChannel\",\"ssmmessages:OpenControlChannel\",\"ssmmessages:OpenDataChannel\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ec2messages:AcknowledgeMessage\",\"ec2messages:DeleteMessage\",\"ec2messages:FailMessage\",\"ec2messages:GetEndpoint\",\"ec2messages:GetMessages\",\"ec2messages:SendReply\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"

    IAMManagedPolicy6:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "ECR_get_token"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "GetAuthorizationToken",
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:CompleteLayerUpload",
                                "ecr:InitiateLayerUpload",
                                "ecr:PutImage",
                                "ecr:UploadLayerPart"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy7:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "Fallout-Secret-Policy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue",
                                "secretsmanager:DescribeSecret"
                            ],
                            "Resource": "arn:aws:secretsmanager:${AWS::Region}:${EC2PrefixList.OwnerId}:secret:${RDSDBInstance}-dev-pw-AZrdeD"
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": "secretsmanager:ListSecrets",
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy8:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "Zesty${IAMRole25}Policy"
            Path: "/governance/"
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:List*\",\"tag:GetResources\",\"tag:GetTagKeys\",\"tag:GetTagValues\",\"elasticloadbalancing:Describe*\",\"ec2:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyEC2Access\"},{\"Action\":[\"autoscaling:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyEC2AutoScalingAccess\"},{\"Action\":[\"organizations:List*\",\"organizations:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"Zesty${IAMPolicy6}Access\"},{\"Action\":[\"cloudwatch:List*\",\"cloudwatch:Describe*\",\"cloudwatch:GetMetricStatistics\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyCloudWatchAccess\"},{\"Action\":[\"savingsplans:List*\",\"savingsplans:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestySavingsPlansAccess\"},{\"Action\":[\"ce:List*\",\"ce:Describe*\",\"ce:Get*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyCostExplorerAccess\"},{\"Action\":[\"cur:DescribeReportDefinitions\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyCostandUsageReportsAccess\"},{\"Action\":[\"rds:List*\",\"rds:ListTagsForResource\",\"rds:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyRDSAccess\"},{\"Action\":[\"elasticache:List*\",\"elasticache:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyElastiCacheAccess\"},{\"Action\":[\"redshift:Describe*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyRedshiftAccess\"},{\"Action\":[\"es:List*\",\"es:Describe*\",\"es:GetCompatibleElasticsearchVersions\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyElasticsearchAccess\"},{\"Action\":[\"s3:HeadBucket\",\"s3:ListAllMyBuckets\",\"s3:ListBucket\",\"s3:GetBucketAcl\",\"s3:GetBucketCORS\",\"s3:GetBucketLocation\",\"s3:GetBucketLogging\",\"s3:GetBucketPolicy\",\"s3:GetBucketRequestPayment\",\"s3:GetBucketTagging\",\"s3:GetBucketVersioning\",\"s3:GetBucketWebsite\",\"s3:GetEncryptionConfiguration\",\"s3:GetLifecycleConfiguration\",\"s3:GetMetricsConfiguration\",\"s3:GetReplicationConfiguration\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"ZestyS3Access\"}]}"

    IAMManagedPolicy9:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "SSM-EC2-Policy"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:UpdateInstanceInformation",
                                "ssmmessages:CreateControlChannel",
                                "ssmmessages:CreateDataChannel",
                                "ssmmessages:OpenControlChannel",
                                "ssmmessages:OpenDataChannel"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetEncryptionConfiguration"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy10:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "deployLambdaToVpc"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:CreateNetworkInterface",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DescribeInstances",
                                "ec2:AttachNetworkInterface",
                                "cloudwatch:putMetricData"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    IAMManagedPolicy11:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "${ElasticLoadBalancingV2TargetGroup5.TargetGroupName}-task-get-s3-policy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": "s3:GetObject",
                            "Resource": "arn:aws:s3:::${S3Bucket9}/VIIRS/image_chips/*"
                        }
                    ]
                }

    IAMPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Resource\":[\"arn:*:iam::*:role/${IAMRole}\"],\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole3
            PolicyName: !Sub "AssumeRole-${IAMRole}"

    IAMPolicy2:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"iam:ListRoles\",\"config:DescribeConfigurationRecorders\",\"compute-optimizer:GetEnrollmentStatus\",\"support:DescribeTrustedAdvisorChecks\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ssm:UpdateServiceSetting\",\"ssm:GetServiceSetting\"],\"Resource\":[\"arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor\",\"arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase\"],\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"iam:AWSServiceName\":\"ssm.amazonaws.com\"}},\"Action\":[\"iam:CreateServiceLinkedRole\"],\"Resource\":\"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole5
            PolicyName: "SSMQuickSetupEnableExplorerInlinePolicy"

    IAMPolicy3:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ssm:GetAutomationExecution\",\"ec2:DescribeIamInstanceProfileAssociations\",\"ec2:DisassociateIamInstanceProfile\",\"ec2:DescribeInstances\",\"ssm:StartAutomationExecution\",\"iam:GetInstanceProfile\",\"iam:ListInstanceProfilesForRole\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Condition\":{\"ArnEquals\":{\"iam:PolicyARN\":[\"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\"]}},\"Action\":[\"iam:AttachRolePolicy\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole2}\"],\"Effect\":\"Allow\"},{\"Action\":[\"iam:AddRoleToInstanceProfile\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole2}\"],\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"ec2:NewInstanceProfile\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole2}\"}},\"Action\":[\"ec2:AssociateIamInstanceProfile\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"iam:CreateInstanceProfile\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:instance-profile/${IAMRole2}\"],\"Effect\":\"Allow\"},{\"Action\":[\"iam:GetRole\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole2}\",\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole5}\"],\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"iam:PassedToService\":[\"ec2.amazonaws.com\"]}},\"Action\":[\"iam:PassRole\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole2}\"],\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"iam:PassedToService\":[\"ssm.amazonaws.com\"]}},\"Action\":[\"iam:PassRole\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole5}\"],\"Effect\":\"Allow\"},{\"Action\":[\"iam:CreateRole\"],\"Resource\":[\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/${IAMRole2}\"],\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole5
            PolicyName: !Sub "AWS-QuickSetup-SSMHostMgmt-CreateAndAttachRoleInlinePolicy-${AWS::Region}-yoogl"

    IAMPolicy4:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":[\"arn:aws:logs:${AWS::Region}:${EC2PrefixList.OwnerId}:log-group:*\"],\"Effect\":\"Allow\",\"Sid\":\"managelogstream\"}]}"
            Roles:
              - !Ref IAMRole6
            PolicyName: "cloudwatch-logs-mgmt"

    IAMPolicy5:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"events:PutEvents\"],\"Resource\":\"arn:aws:events:${AWS::Region}:754775651946:event-bus/${ECSCluster2}\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole13
            PolicyName: "EventBusActions"

    IAMPolicy6:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:DescribeInternetGateways\",\"ec2:DetachInternetGateway\",\"ec2:DeleteInternetGateway\",\"ec2:DescribeSubnets\",\"ec2:DeleteSubnet\",\"ec2:DescribeRouteTables\",\"ec2:DeleteRouteTable\",\"ec2:DescribeNetworkAcls\",\"ec2:DeleteNetworkAcl\",\"ec2:DeleteSecurityGroup\",\"ec2:DeleteVpc\",\"ec2:DescribeRegions\",\"ec2:DescribeAccountAttributes\",\"ec2:DescribeNetworkInterfaces\",\"ec2:DescribeSecurityGroups\",\"ec2:DeleteSecurityGroup\",\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole7
            PolicyName: "Organizations"

    IAMPolicy7:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":\"servicecatalog:AcceptPortfolioShare\",\"Resource\":\"arn:aws:catalog:*:${EC2PrefixList.OwnerId}:portfolio/*\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:AssociatePrincipalWithPortfolio\",\"Resource\":\"arn:aws:catalog:*:${EC2PrefixList.OwnerId}:portfolio/*\",\"Effect\":\"Allow\"},{\"Action\":\"iam:GetRole\",\"Resource\":\"arn:aws:iam::${EC2PrefixList.OwnerId}:role/servicecatalog-puppet/${IAMRole27}\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:SearchProductsAsAdmin\",\"Resource\":\"arn:aws:servicecatalog:*:${EC2PrefixList.OwnerId}:*/*\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:SearchProductsAsAdmin\",\"Resource\":\"arn:aws:catalog:*:${EC2PrefixList.OwnerId}:portfolio/*\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:ListAcceptedPortfolioShares\",\"Resource\":\"arn:aws:servicecatalog:*:${EC2PrefixList.OwnerId}:*/*\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:ListProvisioningArtifacts\",\"Resource\":\"arn:aws:catalog:*:${EC2PrefixList.OwnerId}:product/*\",\"Effect\":\"Allow\"},{\"Action\":\"servicecatalog:ListPortfolios\",\"Resource\":\"arn:aws:catalog:*:${EC2PrefixList.OwnerId}:product/*\",\"Effect\":\"Allow\"},{\"Action\":\"sns:Publish\",\"Resource\":\"arn:aws:sns:*:754775651946:servicecatalog-puppet-cloudformation-regional-events\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole27
            PolicyName: "acceptShares"

    IAMPolicy8:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"events:PutEvents\"],\"Resource\":\"arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole26
            PolicyName: "SecurityLogForwarderPolicy"

    IAMPolicy9:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "Statement1",
                			"Effect": "Allow",
                			"Action": "ecs:DescribeTasks",
                			"Resource": "*"
                		}
                	]
                }
            Roles:
              - !Ref IAMRole14
            PolicyName: "AmazonEC2ContainerServiceDescribeInstances"

    IAMPolicy10:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":\"s3:GetObject\",\"Resource\":[\"arn:aws:s3:::cf-templates-*\",\"arn:aws:s3:::cf-templates-*/*\"],\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole27
            PolicyName: "AllowAccessToSCTemplates"

    IAMPolicy11:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"budgets:ViewBudget\",\"budgets:Describe*\"],\"Resource\":\"arn:aws:budgets::*:budget/*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: !Sub "Budgets${IAMRole25}Policy"

    IAMPolicy12:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"imagebuilder:ListImages\",\"imagebuilder:GetImage\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "ami"

    IAMPolicy13:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ecs:ListAttributes\",\"ecs:DescribeTaskSets\",\"ecs:DescribeTaskDefinition\",\"ecs:DescribeClusters\",\"ecs:ListServices\",\"ecs:ListAccountSettings\",\"ecs:DescribeCapacityProviders\",\"ecs:ListTagsForResource\",\"ecs:ListTasks\",\"ecs:ListTaskDefinitionF${IAMPolicy12}lies\",\"ecs:DescribeServices\",\"ecs:ListContainerInstances\",\"ecs:DescribeContainerInstances\",\"ecs:DescribeTasks\",\"ecs:ListTaskDefinitions\",\"ecs:ListClusters\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "ECSChargebackPolicy"

    IAMPolicy14:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:DescribeImages\",\"ec2:DescribeVolumeStatus\",\"ec2:DescribeVolumes\",\"ec2:DescribeSnapshots\",\"ec2:DescribeSnapshotAttribute\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "InventoryCollectorPolicy"

    IAMPolicy15:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"rds:DescribeDBProxyTargetGroups\",\"rds:DescribeDBInstanceAutomatedBackups\",\"rds:DescribeDBEngineVersions\",\"rds:DescribeDBSubnetGroups\",\"rds:DescribeGlobalClusters\",\"rds:DescribeExportTasks\",\"rds:DescribePendingMaintenanceActions\",\"rds:DescribeEngineDefaultParameters\",\"rds:DescribeDBParameterGroups\",\"rds:DescribeDBClusterBacktracks\",\"rds:DescribeCustomAvailabilityZones\",\"rds:DescribeReservedDBInstancesOfferings\",\"rds:DescribeDBProxyTargets\",\"rds:DownloadDBLogFilePortion\",\"rds:DescribeDBInstances\",\"rds:DescribeSourceRegions\",\"rds:DescribeEngineDefaultClusterParameters\",\"rds:DescribeInstallationMedia\",\"rds:DescribeDBProxies\",\"rds:DescribeDBParameters\",\"rds:DescribeEventCategories\",\"rds:DescribeDBProxyEndpoints\",\"rds:DescribeEvents\",\"rds:DescribeDBClusterSnapshotAttributes\",\"rds:DescribeDBClusterParameters\",\"rds:DescribeEventSubscriptions\",\"rds:DescribeDBSnapshots\",\"rds:DescribeDBLogFiles\",\"rds:DescribeDBSecurityGroups\",\"rds:DescribeDBSnapshotAttributes\",\"rds:DescribeReservedDBInstances\",\"rds:ListTagsForResource\",\"rds:DescribeValidDBInstanceModifications\",\"rds:DescribeDBClusterSnapshots\",\"rds:DescribeOrderableDBInstanceOptions\",\"rds:DescribeOptionGroupOptions\",\"rds:DescribeDBClusterEndpoints\",\"rds:DescribeCertificates\",\"rds:DescribeDBClusters\",\"rds:DescribeAccountAttributes\",\"rds:DescribeOptionGroups\",\"rds:DescribeDBClusterParameterGroups\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ec2:DescribeRegions\",\"cloudwatch:GetMetricStatistics\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "RDSUtilizationPolicy"

    IAMPolicy16:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"trustedadvisor:Describe*\",\"trustedadvisor:List*\",\"trustedadvisor:GenerateReport\",\"trustedadvisor:IncludeCheckItems\",\"trustedadvisor:ExcludeCheckItems\",\"trustedadvisor:RefreshCheck\",\"support:DescribeTrustedAdvisorChecks\",\"support:DescribeTrustedAdvisorCheckResult\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "TAPolicy"

    IAMPolicy17:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:DescribeTransitGatewayAttachments\",\"cloudwatch:Describe*\",\"cloudwatch:Get*\",\"cloudwatch:List*\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: "TransitGatewayPolicy"

    IAMPolicy18:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ce:GetRightsizingRecommendation\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole29
            PolicyName: !Sub "Rightsize${IAMRole25}Policy"

    IAMPolicy19:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "publishToCloudWatchLogs",
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents",
                        "logs:DescribeLogStreams",
                        "logs:DescribeLogGroups",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup"
                      ],
                      "Resource": "arn:aws:logs:${AWS::Region}:${EC2PrefixList.OwnerId}:log-group:dev-vpc-flow-logs:*"
                    }
                  ]
                }
            Roles:
              - !Ref IAMRole31
            PolicyName: "PublishFlowLogsPolicy"

    IAMPolicy20:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ecr:BatchGetImage\",\"ecr:DescribeImages\",\"ecr:GetAuthorizationToken\",\"ecr:GetDownloadUrlForLayer\",\"ecr:ListTagsForResource\",\"ecr:GetRegistryPolicy\",\"ecr-public:DescribeImages\",\"ecr-public:ListTagsForResource\",\"ecr-public:GetAuthorizationToken\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ec2:CopySnapshot\",\"ec2:CreateSnapshot\",\"kms:CreateKey\",\"kms:DescribeKey\",\"ec2:GetEbsEncryptionByDefault\",\"ec2:DescribeSnapshots\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"ec2:CreateTags\"],\"Resource\":\"arn:aws:ec2:*::snapshot/*\",\"Effect\":\"Allow\"},{\"Action\":\"kms:CreateAlias\",\"Resource\":[\"arn:aws:kms:*:*:alias/wizKey\",\"arn:aws:kms:*:*:key/*\"],\"Effect\":\"Allow\"},{\"Condition\":{\"StringLike\":{\"kms:ViaService\":\"ec2.*.amazonaws.com\"}},\"Action\":[\"kms:CreateGrant\",\"kms:ReEncryptFrom\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"aws:ResourceTag/wiz\":\"auto-gen-cmk\"}},\"Action\":[\"kms:GetKeyPolicy\",\"kms:PutKeyPolicy\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"ec2:ResourceTag/wiz\":\"auto-gen-snapshot\"}},\"Action\":[\"ec2:DeleteSnapshot\",\"ec2:ModifySnapshotAttribute\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole30
            PolicyName: "WizScannerPolicy"

    IAMPolicy21:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Condition\":{\"StringEquals\":{\"aws:ResourceTag/wiz\":\"auto-gen-snapshot\"}},\"Action\":[\"redshift:DeleteClusterSnapshot\",\"redshift:AuthorizeSnapshotAccess\",\"redshift:RevokeSnapshotAccess\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"redshift:CreateTags\"],\"Resource\":\"arn:aws:redshift:*:*:snapshot:*/*\",\"Effect\":\"Allow\"},{\"Action\":[\"redshift:DescribeClusterSnapshots\",\"redshift:DescribeClusters\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"aws:RequestTag/wiz\":\"auto-gen-snapshot\"}},\"Action\":[\"redshift:CreateClusterSnapshot\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"rds:DescribeDBClusters\",\"rds:DescribeDBClusterSnapshots\",\"rds:DescribeDBInstances\",\"rds:DescribeDBSnapshots\",\"rds:DescribeDBSubnetGroups\",\"rds:ListTagsForResource\",\"rds:AddTagsToResource\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"rds:DeleteDBClusterSnapshot\",\"rds:CopyDBClusterSnapshot\",\"rds:ModifyDBClusterSnapshotAttribute\"],\"Resource\":\"arn:aws:rds:*:*:cluster-snapshot:wiz-autogen-*\",\"Effect\":\"Allow\"},{\"Action\":[\"rds:DeleteDBSnapshot\",\"rds:CopyDBSnapshot\",\"rds:ModifyDBSnapshotAttribute\"],\"Resource\":\"arn:aws:rds:*:*:snapshot:wiz-autogen-*\",\"Effect\":\"Allow\"},{\"Condition\":{\"StringEquals\":{\"rds:req-tag/wiz\":\"auto-gen-snapshot\"}},\"Action\":[\"rds:CreateDBClusterSnapshot\",\"rds:CreateDBSnapshot\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"s3:GetObject\",\"s3:ListBucket\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Condition\":{\"StringLike\":{\"kms:ViaService\":\"rds.*.amazonaws.com\"}},\"Action\":[\"kms:CreateGrant\",\"kms:ReEncrypt*\"],\"Resource\":\"*\",\"Effect\":\"Allow\"},{\"Action\":[\"dynamodb:Scan\",\"dynamodb:DescribeTable\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole30
            PolicyName: "WizDataScanningPolicy"

    IAMPolicy22:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"lambda:GetFunction\",\"lambda:GetLayerVersion\",\"ecr:BatchGetImage\",\"ecr:GetAuthorizationToken\",\"ecr:GetDownloadUrlForLayer\",\"ecr-public:GetAuthorizationToken\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles:
              - !Ref IAMRole30
            PolicyName: "WizServerlessScanningPolicy"

    IAMPolicy23:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:GetTransitGateway*\",\"ec2:Search*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowTGWAccess\"}]}"
            Roles:
              - !Sub "${IAMRole39}-${IAMRole25}"
            PolicyName: !Sub "${IAMPolicy26}-${IAMRole25}"

    IAMPolicy24:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"acm:GetCertificate\",\"apigateway:GET\",\"backup:DescribeGlobalSettings\",\"backup:GetBackupVaultAccessPolicy\",\"backup:GetBackupVaultNotifications\",\"backup:ListBackupVaults\",\"backup:ListTags\",\"cloudtrail:GetInsightSelectors\",\"cloudtrail:ListTrails\",\"codebuild:BatchGetProjects\",\"codebuild:GetResourcePolicy\",\"codebuild:ListProjects\",\"cognito-identity:DescribeIdentityPool\",\"connect:ListInstances\",\"connect:ListInstanceAttributes\",\"connect:ListInstanceStorageConfigs\",\"connect:ListSecurityKeys\",\"connect:ListLexBots\",\"connect:ListLambdaFunctions\",\"connect:ListApprovedOrigins\",\"connect:ListIntegrationAssociations\",\"dynamodb:DescribeKinesisStre${IAMPolicy12}ngDestination\",\"dynamodb:ListExports\",\"profile:GetDomain\",\"profile:ListDomains\",\"profile:ListIntegrations\",\"voiceid:DescribeDomain\",\"wisdom:GetAssistant\",\"ec2:CopySnapshot\",\"ec2:CreateSnapshot\",\"ec2:CreateTags\",\"ec2:GetEbsEncryptionByDefault\",\"ec2:SearchTransitGatewayRoutes\",\"ec2:SearchTransitGatewayRoutes\",\"ecr:BatchGetImage\",\"ecr:GetAuthorizationToken\",\"ecr:GetDownloadUrlForLayer\",\"ecr:GetRegistryPolicy\",\"eks:ListTagsForResource\",\"elasticfilesystem:DescribeAccessPoints\",\"elasticfilesystem:DescribeFileSystemPolicy\",\"glacier:GetDataRetrievalPolicy\",\"glacier:GetVaultLock\",\"glue:GetConnection\",\"glue:GetSecurityConfiguration\",\"glue:GetTags\",\"identitystore:ListUsers\",\"identitystore:ListGroups\",\"kafka:ListClusters\",\"kendra:DescribeDataSource\",\"kendra:DescribeIndex\",\"kendra:ListDataSources\",\"kendra:ListIndices\",\"kendra:ListTagsForResource\",\"kinesisanalytics:DescribeApplication\",\"kinesisanalytics:ListApplications\",\"kinesisanalytics:ListTagsForResource\",\"kinesisvideo:GetDataEndpoint\",\"kinesisvideo:ListStreams\",\"kinesisvideo:ListTagsForStream\",\"kms:GetKeyRotationStatus\",\"kms:ListResourceTags\",\"kms:CreateGrant\",\"kms:CreateKey\",\"kms:DescribeKey\",\"lambda:GetFunction\",\"lambda:GetLayerVersion\",\"logs:ListTagsForResource\",\"s3:ListMultiRegionAccessPoints\",\"s3:GetMultiRegionAccessPointPolicy\",\"ses:DescribeActiveReceiptRuleSet\",\"ses:GetAccount\",\"ses:GetConfigurationSet\",\"ses:GetConfigurationSetEventDestinations\",\"ses:GetDedicatedIps\",\"ses:GetEmailIdentity\",\"ses:ListConfigurationSets\",\"ses:ListDedicatedIpPools\",\"ses:ListReceiptFilters\",\"sqs:GetQueueAttributes\",\"wafv2:GetLoggingConfiguration\",\"wafv2:GetWebACLForResource\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"FullAccess\"},{\"Action\":[\"s3:GetObject\",\"s3:GetBucketLocation\",\"s3:GetObjectTagging\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::*terraform*\",\"arn:aws:s3:::*tfstate*\",\"arn:aws:s3:::*tf?state*\",\"arn:aws:s3:::*cloudtrail*\",\"arn:aws:s3:::elasticbeanstalk-*\"],\"Effect\":\"Allow\",\"Sid\":\"WizAccessS3\"}]}"
            Roles:
              - !Ref IAMRole35
            PolicyName: "WizFullPolicy"

    IAMPolicy25:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"events:PutEvents\"],\"Resource\":\"arn:aws:events:*:319539850501:event-bus/IamAccessAnalyzerPipeline-EventBus\",\"Effect\":\"Allow\",\"Sid\":\"eventBus\"}]}"
            Roles:
              - !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventRole"
            PolicyName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventPolicy"

    IAMPolicy26:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"support:DescribeTrustedAdvisorChecks\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowTrustedAdvisor\"},{\"Action\":[\"iam:*\"],\"Resource\":[\"arn:aws:iam::*:role/governance/*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowIAM\"},{\"Condition\":{\"StringEquals\":{\"aws:RequestTag/Governance\":\"maxar\"}},\"Action\":[\"cloudformation:*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowCloudFormation\"},{\"Action\":[\"ec2:ExportTransitGatewayRoutes\",\"ec2:GetTransitGateway*\",\"ec2:Search*\"],\"Resource\":[\"*\"],\"Effect\":\"Allow\",\"Sid\":\"AllowTGWAccess\"}]}"
            Roles:
              - !Ref IAMRole39
            PolicyName: "Maxar-Security-Audit-Policy"

    IAMInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole2
            Roles:
              - !Ref IAMRole2

    IAMInstanceProfile2:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole9
            Roles:
              - !Ref IAMRole9

    IAMInstanceProfile3:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole14
            Roles:
              - !Ref IAMRole14

    IAMInstanceProfile4:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole17
            Roles:
              - !Ref IAMRole17

    IAMInstanceProfile5:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole28
            Roles:
              - !Ref IAMRole28

    IAMInstanceProfile6:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole32
            Roles:
              - !Ref IAMRole32

    IAMAccessKey:
        Type: "AWS::IAM::AccessKey"
        Properties:
            Status: "Active"
            UserName: "CD_deployer"

    IAMAccessKey2:
        Type: "AWS::IAM::AccessKey"
        Properties:
            Status: "Active"
            UserName: "CD_deployer"

    AccessAnalyzerAnalyzer:
        Type: "AWS::AccessAnalyzer::Analyzer"
        Properties:
            AnalyzerName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-analyzer"
            Type: "ACCOUNT"
            Tags:
              -
                Key: "Project"
                Value: "access-analyzer"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "access-analyzer-spoke"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"
              -
                Key: "Name"
                Value: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-analyzer"
            ArchiveRules:
              -
                Filter:
                  -
                    Contains:
                      - ":role/xaccount-Billing"
                    Property: "resource"
                RuleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-archiveRule-billingRole"
              -
                Filter:
                  -
                    Contains:
                      - ":role/governance/"
                    Property: "resource"
                RuleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-archiveRule-governance"
              -
                Filter:
                  -
                    Contains:
                      - ":saml-provider/Okta"
                    Property: "principal.Federated"
                RuleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-archiveRule-oktaFederation"
              -
                Filter:
                  -
                    Contains:
                      - !Sub ":role/PrismaCloud${IAMRole25}Role"
                    Property: "resource"
                RuleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-archiveRule-prisma"
              -
                Filter:
                  -
                    Contains:
                      - ":role/servicecatalog-puppet/"
                    Property: "resource"
                RuleName: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-archiveRule-servicecatalog"

    IAMVirtualMFADevice:
        Type: "AWS::IAM::VirtualMFADevice"
        Properties:
            SerialNumber: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:mfa/vault"
            Users:
              - !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:root"

    IAMSAMLProvider:
        Type: "AWS::IAM::SAMLProvider"
        Properties:
            Name: "Okta"
            SamlMetadataDocument: |
                <?xml version="1.0" encoding="UTF-8"?>
                <md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" entityID="http://www.okta.com/exk2jgnr13R7nmIkU2p7">
                    <md:IDPSSODescriptor WantAuthnRequestsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
                        <md:KeyDescriptor use="signing">
                            <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
                                <ds:X509Data>
                                    <ds:X509Certificate>MIIDmjCCAoKgAwIBAgIGAWImpZeiMA0GCSqGSIb3DQEBCwUAMIGNMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxDjAMBgNVBAMMBW1heGFyMRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMB4XDTE4MDMxNDIyMzIyOVoXDTI4MDMxNDIyMzMyOVowgY0xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMQ0wCwYDVQQKDARPa3RhMRQwEgYDVQQLDAtTU09Qcm92aWRlcjEOMAwGA1UEAwwFbWF4YXIxHDAaBgkqhkiG9w0BCQEWDWluZm9Ab2t0YS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCLEwIqe66GPinor2hKkbUBC3rPnU6Das0DUG4qw1XzBVJZ6QruXF+xGhzxo2ACXxlJzdM+hfYbfVjbi4nsMtMGCBgg/8llCs9zPGJVmWATtlF8hFh7O/BECdVbT7RPn9KvlK47cg/1qqhiAOJ6hHemN9XB8MqjE+FkVNKz4BUHeXhHlBQ8ql/huj+Vo8bn5IpLZ6PhhNH1WFqTrZtfywdrb0esXmc8tcxjwYmViQ2yIE8XChRP6atsaRwjGGf+ZZ+9CDQk3DpKeC95+fZPyJlVNRDTb41ExQPYpcCTYVGcv0Xi/OsfCr/nnjgJjg+Tp438YZv4qcibCMQVJjvpOU8rAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAB3AkoqPoYXUBfdkNdP41YyC/QWbsdFcwmAfGxAbvKRX7eZ5r/mic85/iCbOdbYQ95mm1x9JwW7nC+ZffQkPiWK4D8leaQa1AcL29ohcSCTWnrpj0Wadz5Ypl3O4Y890R/jAttkJuxw67iSc4aklkMKGAoSbz3n1kQJdcvCA2WRH1KszotMzDxFuD0ApvZfk5eo1vT85Q+JZmMiRkF8Caesf4XpZmEAsc7OtmHxEuxnz5ARBHhiVSj6NNqtkqkc7FeEY1tUEwT9S9/2aB90rG8OvHOhpJ7PhMVL+XcyT5edebyynTz4MneQ3/O0UeYnTqCjm Exc2f+smsdb5MfHgrAI=
                                    </ds:X509Certificate>
                                </ds:X509Data>
                            </ds:KeyInfo>
                        </md:KeyDescriptor>
                        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
                        <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>
                        <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://maxar.okta.com/app/amazon_aws/exk2jgnr13R7nmIkU2p7/sso/saml"/>
                        <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="https://maxar.okta.com/app/amazon_aws/exk2jgnr13R7nmIkU2p7/sso/saml"/>
                    </md:IDPSSODescriptor>
                </md:EntityDescriptor>

            Tags:
              -
                Key: "Project"
                Value: "account-vending-machine"
              -
                Key: "Department"
                Value: "aws-governance"
              -
                Key: "Environment"
                Value: "prod"
              -
                Key: "Component"
                Value: "iam-provisioner"
              -
                Key: "Governance"
                Value: "maxar"
              -
                Key: "Contact"
                Value: "aws-governance@maxar.com"
              -
                Key: "Name"
                Value: "Okta"

    SecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "${RDSDBInstance}-dev-pw"
            Tags:
              -
                Key: "Project"
                Value: "Fallout"
              -
                Key: "POC"
                Value: "Jim"
            SecretString: !Sub "{\"username\":\"postgres\",\"password\":\"fIBhrB3FeaIC6nToeD22\",\"engine\":\"postgres\",\"host\":\"${RDSDBInstance}.csosy4fcuokb.${AWS::Region}.rds.amazonaws.com\",\"port\":${RDSDBInstance.Endpoint.Port},\"dbname\":\"${RDSDBInstance}\",\"dbInstanceIdentifier\":\"${RDSDBInstance}\"}"

    CertificateManagerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: "*.rapidprototypeteam.net"
            SubjectAlternativeNames:
              - "*.rapidprototypeteam.net"
            DomainValidationOptions:
              -
                DomainName: "*.rapidprototypeteam.net"
                ValidationDomain: "*.rapidprototypeteam.net"
            CertificateTransparencyLoggingPreference: "ENABLED"

    KMSKey:
        Type: "AWS::KMS::Key"
        Properties:
            Enabled: true
            Description: "Encryption for flow log objects"
            KeyUsage: "ENCRYPT_DECRYPT"
            KeyPolicy: !Sub |
                {
                  "Version" : "2012-10-17",
                  "Statement" : [ {
                    "Sid" : "flowLogPolicy",
                    "Effect" : "Allow",
                    "Principal" : {
                      "Service" : [ "delivery.logs.amazonaws.com", "logs.${AWS::Region}.amazonaws.com" ]
                    },
                    "Action" : [ "kms:ReEncrypt*", "kms:GenerateDataKey*", "kms:Encrypt", "kms:DescribeKey", "kms:Decrypt" ],
                    "Resource" : "*"
                  }, {
                    "Sid" : "",
                    "Effect" : "Allow",
                    "Principal" : {
                      "AWS" : [ "arn:aws:iam::${EC2PrefixList.OwnerId}:root", "arn:aws:iam::433135671378:root" ]
                    },
                    "Action" : "kms:*",
                    "Resource" : "*"
                  } ]
                }
            KeySpec: "SYMMETRIC_DEFAULT"
            MultiRegion: false

    KMSKey2:
        Type: "AWS::KMS::Key"
        Properties:
            Enabled: true
            Description: "auto-generated by Wiz"
            KeyUsage: "ENCRYPT_DECRYPT"
            KeyPolicy: !Sub |
                {
                  "Version" : "2012-10-17",
                  "Id" : "WizKeyPolicy",
                  "Statement" : [ {
                    "Sid" : "Enable IAM User Permissions",
                    "Effect" : "Allow",
                    "Principal" : {
                      "AWS" : "arn:aws:iam::${EC2PrefixList.OwnerId}:root"
                    },
                    "Action" : "kms:*",
                    "Resource" : "*"
                  }, {
                    "Sid" : "Enable IAM User Permissions",
                    "Effect" : "Allow",
                    "Principal" : {
                      "AWS" : "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole30}"
                    },
                    "Action" : "kms:*",
                    "Resource" : "*"
                  }, {
                    "Sid" : "Enable IAM User Permissions",
                    "Effect" : "Allow",
                    "Principal" : {
                      "AWS" : "arn:aws:sts::640574606290:assumed-role/WizOrchestratorNodePoolRole/i-0f0fcc9681baa54e5"
                    },
                    "Action" : "kms:*",
                    "Resource" : "*"
                  }, {
                    "Sid" : "Enable IAM User Permissions",
                    "Effect" : "Allow",
                    "Principal" : {
                      "AWS" : "arn:aws:iam::640574606290:root"
                    },
                    "Action" : "kms:*",
                    "Resource" : "*"
                  } ]
                }
            KeySpec: "SYMMETRIC_DEFAULT"
            Tags:
              -
                Key: "wiz"
                Value: "auto-gen-cmk"
            MultiRegion: false

    KMSAlias:
        Type: "AWS::KMS::Alias"
        Properties:
            AliasName: "alias/wizKey"
            TargetKeyId: !Ref KMSKey2

    WAFv2WebACL:
        Type: "AWS::WAFv2::WebACL"
        Properties:
            Name: "fallout-wacl"
            Description: ""
            DefaultAction:
                Allow: {}
            VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: "fallout-wacl"
            Scope: "REGIONAL"
            Rules:
              -
                Name: "AWS-AWSManagedRulesCommonRuleSet"
                Priority: 0
                OverrideAction:
                    None: {}
                Statement:
                    ManagedRuleGroupStatement:
                        VendorName: "AWS"
                        Name: "AWSManagedRulesCommonRuleSet"
                VisibilityConfig:
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "AWS-AWSManagedRulesCommonRuleSet"

    WAFv2WebACLAssociation:
        Type: "AWS::WAFv2::WebACLAssociation"
        Properties:
            ResourceArn: !Ref ElasticLoadBalancingV2LoadBalancer3

    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Console-Login-Failures"
            Description: "Respond to Console Login Failures"
            EventPattern: "{\"detail-type\":[\"AWS Console Sign In via CloudTrail\"],\"detail\":{\"responseElements\":{\"ConsoleLogin\":[\"Failure\"]}}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule2:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-IAM-Policy-Changes"
            Description: "IAM Policy Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.iam\"],\"detail\":{\"eventSource\":[\"iam.amazonaws.com\"],\"eventName\":[\"DeleteGroupPolicy\",\"DeleteRolePolicy\",\"DeleteUserPolicy\",\"PutGroupPolicy\",\"PutRolePolicy\",\"PutUserPolicy\",\"CreatePolicy\",\"DeletePolicy\",\"CreatePolicyVersion\",\"DeletePolicyVersion\",\"AttachRolePolicy\",\"DetachRolePolicy\",\"AttachUserPolicy\",\"DetachUserPolicy\",\"AttachGroupPolicy\",\"DetachGroupPolicy\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule3:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Cloudtrail-Changes"
            Description: "Respond to Cloudtrail Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.cloudtrail\"],\"detail\":{\"eventSource\":[\"cloudtrail.amazonaws.com\"],\"eventName\":[\"CreateTrail\",\"UpdateTrail\",\"DeleteTrail\",\"StartLogging\",\"StopLogging\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule4:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-AWSConfig-Changes"
            Description: "Respond to AWS Config Service Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.config\"],\"detail\":{\"eventSource\":[\"config.amazonaws.com\"],\"eventName\":[\"StopConfigurationRecorder\",\"DeleteDeliveryChannel\",\"PutDeliveryChannel\",\"PutConfigurationRecorder\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule5:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-KMS-CMK-Deletions"
            Description: "Respond to KMS CMK Deletion Actions"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.kms\"],\"detail\":{\"eventSource\":[\"kms.amazonaws.com\"],\"eventName\":[\"DisableKey\",\"ScheduleKeyDeletion\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule6:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-NACL-Changes"
            Description: "Respond to NACL Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"],\"detail\":{\"eventSource\":[\"ec2.amazonaws.com\"],\"eventName\":[\"CreateNetworkAcl\",\"CreateNetworkAclEntry\",\"DeleteNetworkAcl\",\"DeleteNetworkAclEntry\",\"ReplaceNetworkAclEntry\",\"ReplaceNetworkAclAssociation\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule7:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Network-Gateway-Changes"
            Description: "Respond to Network Gateway Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"],\"detail\":{\"eventSource\":[\"ec2.amazonaws.com\"],\"eventName\":[\"CreateCustomerGateway\",\"DeleteCustomerGateway\",\"AttachInternetGateway\",\"CreateInternetGateway\",\"DeleteInternetGateway\",\"DetachInternetGateway\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule8:
        Type: "AWS::Events::Rule"
        Properties:
            Name: !Sub "CIS-Alert-${IAMPolicy6}-Changes"
            Description: !Sub "Respond to AWS ${IAMPolicy6} Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.organizations\"],\"detail\":{\"eventSource\":[\"organizations.amazonaws.com\"],\"eventName\":[\"AcceptHandshake\",\"AttachPolicy\",\"CreateAccount\",\"CreateOrganizationalUnit\",\"CreatePolicy\",\"DeclineHandshake\",\"DeleteOrganization\",\"DeleteOrganizationalUnit\",\"DeletePolicy\",\"DetachPolicy\",\"DisablePolicyType\",\"EnablePolicyType\",\"InviteAccountToOrganization\",\"LeaveOrganization\",\"MoveAccount\",\"RemoveAccountFromOrganization\",\"UpdatePolicy\",\"UpdateOrganizationalUnit\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule9:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Root-Account-Usage"
            Description: "Respond to Root Account Usage"
            EventPattern: "{\"detail-type\":[\"AWS Console Sign In via CloudTrail\"],\"detail\":{\"userIdentity\":{\"type\":[\"Root\"],\"invokedBy\":[{\"exists\":false}]},\"eventType\":[{\"anything-but\":\"AwsServiceEvent\"}]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule10:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Route-Table-Changes"
            Description: "Respond to VPC Route Table Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"],\"detail\":{\"eventSource\":[\"ec2.amazonaws.com\"],\"eventName\":[\"CreateRoute\",\"CreateRouteTable\",\"ReplaceRoute\",\"ReplaceRouteTableAssociation\",\"DeleteRouteTable\",\"DeleteRoute\",\"DisassociateRouteTable\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule11:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-S3-Bucket-Policy-Changes"
            Description: "Respond to S3 Bucket Policy Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.s3\"],\"detail\":{\"eventSource\":[\"s3.amazonaws.com\"],\"eventName\":[\"PutBucketAcl\",\"PutBucketPolicy\",\"PutBucketCors\",\"PutBucketLifecycle\",\"PutBucketReplication\",\"DeleteBucketPolicy\",\"DeleteBucketCors\",\"DeleteBucketLifecycle\",\"DeleteBucketReplication\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule12:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Security-Group-Changes"
            Description: "Respond to Security Group Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"],\"detail\":{\"eventSource\":[\"ec2.amazonaws.com\"],\"eventName\":[\"AuthorizeSecurityGroupIngress\",\"AuthorizeSecurityGroupEgress\",\"RevokeSecurityGroupIngress\",\"RevokeSecurityGroupEgress\",\"CreateSecurityGroup\",\"DeleteSecurityGroup\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule13:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Sign-In-Without-MFA"
            Description: "Respond to Console login without MFA"
            EventPattern: "{\"detail-type\":[\"AWS Console Sign In via CloudTrail\"],\"detail\":{\"responseElements\":{\"ConsoleLogin\":[\"Success\"]},\"eventName\":[\"ConsoleLogin\"],\"userIdentity\":{\"type\":[\"IAMUser\"]},\"additionalEventData\":{\"MFAUsed\":[{\"anything-but\":\"Yes\"}]}}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule14:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-Unauthorized-API-Calls"
            Description: "Unauthorized API Calls"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"errorCode\":[\"AccessDenied\",\"*UnauthorizedOperation\"],\"source\":[\"aws.cloudtrail\"]}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule15:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "CIS-Alert-VPC-Changes"
            Description: "Respond to VPC Changes"
            EventPattern: "{\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"],\"detail\":{\"eventSource\":[\"ec2.amazonaws.com\"],\"eventName\":[\"CreateVpc\",\"DeleteVpc\",\"ModifyVpcAttribute\",\"AcceptVpcPeeringConnection\",\"CreateVpcPeeringConnection\",\"DeleteVpcPeeringConnection\",\"RejectVpcPeeringConnection\",\"AttachClassicLinkVpc\",\"DetachClassicLinkVpc\",\"DisableVpcClassicLink\",\"EnableVpcClassicLink\"]}}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:370438565036:event-bus/SecurityEventBusRouteToFirehose"
                Id: "forward-to-logging"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/${IAMRole26}"
            EventBusName: !Ref ECSCluster2

    EventsRule16:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "watch-queue"
            ScheduleExpression: "rate(3 minutes)"
            State: "ENABLED"
            Targets:
              -
                Arn: !GetAtt LambdaFunction.Arn
                Id: "c46932db-dfdd-4869-9b61-b9106beb53d6"
            EventBusName: !Ref ECSCluster2

    EventsRule17:
        Type: "AWS::Events::Rule"
        Properties:
            Name: !Sub "SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventRule"
            Description: "Send Access Analyzer events to EventBus"
            EventPattern: "{\"detail-type\":[\"Access Analyzer Finding\"],\"source\":[\"aws.access-analyzer\"]}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:319539850501:event-bus/IamAccessAnalyzerPipeline-EventBus"
                Id: "event-bus"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/governance/SC-${EC2PrefixList.OwnerId}-pp-tqjopbtnqo3rg-eventRole"
            EventBusName: !Ref ECSCluster2

    EventsRule18:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "servicecatalog-puppet-forwarder"
            EventPattern: "{\"source\":[\"servicecatalog-puppet\"]}"
            State: "ENABLED"
            Targets:
              -
                Arn: !Sub "arn:aws:events:${AWS::Region}:754775651946:event-bus/servicecatalog-puppet-event-bus"
                Id: "servicecatalog-puppet-event-bus"
                RoleArn: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:role/servicecatalog-puppet/${IAMRole13}"
            EventBusName: !Ref EventsEventBus

    EventsEventBus:
        Type: "AWS::Events::EventBus"
        Properties:
            Name: "servicecatalog-puppet-spoke-event-bus"

    EventsEventBusPolicy:
        Type: "AWS::Events::EventBusPolicy"
        Properties:
            Action: "events:PutEvents"
            Principal: !Sub "arn:aws:iam::${EC2PrefixList.OwnerId}:root"
            StatementId: "allow-self"
            EventBusName: !Ref EventsEventBus

    SNSTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "Default_CloudWatch_Alarms_Topic"

    SNSTopicPolicy:
        Type: "AWS::SNS::TopicPolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Id\":\"__${ECSCluster2}_policy_ID\",\"Statement\":[{\"Sid\":\"__${ECSCluster2}_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:GetTopicAttributes\",\"SNS:SetTopicAttributes\",\"SNS:AddPermission\",\"SNS:RemovePermission\",\"SNS:DeleteTopic\",\"SNS:Subscribe\",\"SNS:ListSubscriptionsByTopic\",\"SNS:Publish\"],\"Resource\":\"arn:aws:sns:${AWS::Region}:${EC2PrefixList.OwnerId}:${SNSTopic.TopicName}\",\"Condition\":{\"StringEquals\":{\"AWS:SourceOwner\":\"${EC2PrefixList.OwnerId}\"}}}]}"
            Topics:
              - !Sub "arn:aws:sns:${AWS::Region}:${EC2PrefixList.OwnerId}:${SNSTopic.TopicName}"

    SNSSubscription:
        Type: "AWS::SNS::Subscription"
        Properties:
            TopicArn: !Sub "arn:aws:sns:${AWS::Region}:${EC2PrefixList.OwnerId}:${SNSTopic.TopicName}"
            Endpoint: "joseph.tindle@maxar.com"
            Protocol: "email"
            Region: !Ref AWS::Region

    ResourceGroupsGroup:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: !Sub "AppManager-CFN-SC-${EC2PrefixList.OwnerId}-pp-4bcqvrrtanmpi"
            Description: !Sub "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource SC-${EC2PrefixList.OwnerId}-pp-4bcqvrrtanmpi"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-4bcqvrrtanmpi/38525750-20f9-11ee-97cb-0ab5425b2e9f"

    ResourceGroupsGroup2:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: !Sub "AppManager-CFN-EC2ContainerService-${ECSCluster}"
            Description: !Sub "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource EC2ContainerService-${ECSCluster}"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/EC2ContainerService-${ECSCluster}/e2ef00f0-56bb-11ec-b781-0a56139de9af"

    ResourceGroupsGroup3:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: !Sub "AppManager-CFN-SC-${EC2PrefixList.OwnerId}-pp-qw3iq7tdzy552"
            Description: !Sub "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource SC-${EC2PrefixList.OwnerId}-pp-qw3iq7tdzy552"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-qw3iq7tdzy552/5af1e760-df1a-11ed-a6a3-0e2622efa4f9"

    ResourceGroupsGroup4:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: !Sub "AppManager-CFN-SC-${EC2PrefixList.OwnerId}-pp-utdi7rqalc7wg"
            Description: !Sub "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource SC-${EC2PrefixList.OwnerId}-pp-utdi7rqalc7wg"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-utdi7rqalc7wg/92886630-bcf7-11ed-9151-0ad4184b227d"

    ResourceGroupsGroup5:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: "AppManager-CFN-StackSet-AWS-QuickSetup-SSMHostMgmt-LA-yoogl-dcb2d306-3440-478b-bda6-2cc90ca55244"
            Description: "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource StackSet-AWS-QuickSetup-SSMHostMgmt-LA-yoogl-dcb2d306-3440-478b-bda6-2cc90ca55244"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/StackSet-AWS-QuickSetup-SSMHostMgmt-LA-yoogl-dcb2d306-3440-478b-bda6-2cc90ca55244/0a91e9f0-4d2b-11ec-bd45-12a3e3a63ded"

    ResourceGroupsGroup6:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: "AppManager-CFN-associations-v2-for-account-vending-for-spokes"
            Description: "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource associations-v2-for-account-vending-for-spokes"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/associations-v2-for-account-vending-for-spokes/9a762170-387b-11ee-b34b-0a748a371cc5"

    ResourceGroupsGroup7:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: "AppManager-CFN-StackSet-OptimizationDataRoleStack-df1e229e-4b74-4977-bc6b-2f5b93e8288d"
            Description: "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource StackSet-OptimizationDataRoleStack-df1e229e-4b74-4977-bc6b-2f5b93e8288d"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/StackSet-OptimizationDataRoleStack-df1e229e-4b74-4977-bc6b-2f5b93e8288d/d1734e50-5b8b-11ed-a8cd-125f448db2e1"

    ResourceGroupsGroup8:
        Type: "AWS::ResourceGroups::Group"
        Properties:
            Name: !Sub "AppManager-CFN-SC-${EC2PrefixList.OwnerId}-pp-gzsufs5bk7w5s"
            Description: !Sub "Auto-generated by AWS Systems Manager Application Manager for CloudFormation resource SC-${EC2PrefixList.OwnerId}-pp-gzsufs5bk7w5s"
            ResourceQuery:
                Type: "CLOUDFORMATION_STACK_1_0"
                Query:
                    ResourceTypeFilters:
                      - "AWS::AllSupported"
                    StackIdentifier: !Sub "arn:aws:cloudformation:${AWS::Region}:${EC2PrefixList.OwnerId}:stack/SC-${EC2PrefixList.OwnerId}-pp-gzsufs5bk7w5s/c961c840-3d9a-11ed-bfdf-0ae594feb8e1"

